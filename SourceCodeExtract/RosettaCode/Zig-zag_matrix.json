{"isSuccess":true,"url":"http://rosettacode.org//wiki/Zig-zag_matrix","codeArray":["function ZigZagMatrix(n) {\n      this.height = n;\n      this.width = n;\n      this.mtx = [];\n      for (var i = 0; i < n; i++) \n          this.mtx[i] = [];\n      var i=1, j=1;\n      for (var e = 0; e < n*n; e++) {\n          this.mtx[i-1][j-1] = e;\n          if ((i + j) % 2 == 0) {\n              // Even stripes\n              if (j < n) j ++;\n              else       i += 2;\n              if (i > 1) i --;\n          } else {\n              // Odd stripes\n              if (i < n) i ++;\n              else       j += 2;\n              if (j > 1) j --;\n          }\n      }\n  }\n  ZigZagMatrix.prototype = Matrix.prototype;\n  var z = new ZigZagMatrix(5);\n  print(z);\n  print();\n  z = new ZigZagMatrix(4);\n  print(z);(function (n) {\n    // Read range of values into a series of 'diagonal rows'\n    // for a square of given dimension,\n    // starting at diagonal row i.\n    //  [\n    //   [0],\n    //   [1, 2],\n    //   [3, 4, 5],\n    //   [6, 7, 8, 9],\n    //   [10, 11, 12, 13, 14],\n    //   [15, 16, 17, 18],\n    //   [19, 20, 21],\n    //   [22, 23], \n    //   [24]\n    //  ]\n    // n -> n -> [n] -> [[n]]\n    function diagonals(nEdge, iRow, lstRange) {\n      var lng = (iRow > nEdge ? (2 * nEdge - iRow) : iRow);\n      return lstRange.length ? [lstRange.slice(0, lng)].concat(\n        diagonals(nEdge, iRow + 1, lstRange.slice(lng))\n      ) : [];\n    }\n    // Recursively read off n heads from the diagonals (as rows)\n    // n -> [[n]] -> [[n]]\n    function nHeads(n, lst) {\n      var zipEdge = lst.slice(0, n);\n      return lst.length ? [zipEdge.map(function (x) {\n        return x[0];\n      })].concat(nHeads(n, [].concat.apply([], zipEdge.map(function (x) {\n        return x.length > 1 ? [x.slice(1)] : [];\n      })).concat(lst.slice(n)))) : [];\n    }\n    // [m..n]\n    function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n    // Recursively take n heads from the alternately reversed diagonals\n    //  [                                            [\n    //   [0],           ->    [0, 1, 5, 6, 14] and:      \n    //   [1, 2],                                       [2],\n    //   [5, 4, 3],                                    [4, 3],\n    //   [6, 7, 8, 9],                                 [7, 8, 9],\n    //   [14, 13, 12, 11, 10],                         [13, 12, 11, 10],\n    //   [15, 16, 17, 18],                             [15, 16, 17, 18],\n    //   [21, 20, 19],                                 [21, 20, 19],\n    //   [22, 23],                                     [22, 23],\n    //   [24]                                          [24]\n    // ]                                             ]\n    // \n    //    In the next recursion with the remnant on the right, the next\n    //    5 heads will be [2, 4, 7, 13, 15] - the second row of our zig zag matrix.\n    //    (and so forth)\n    return nHeads(n, diagonals(n, 1, range(0, (n * n) - 1)).map(function (x, i) {\n      i % 2 || x.reverse();\n      return x;\n    }));\n  })(5);[[0, 1, 5, 6, 14],\n   [2, 4, 7, 13, 15],\n   [3, 8, 12, 16, 21],\n   [9, 11, 17, 20, 22],\n   [10, 18, 19, 23, 24]]"],"uncertainCodeArray":[],"textArray":[]}