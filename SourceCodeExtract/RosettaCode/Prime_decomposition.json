{"isSuccess":true,"url":"http://rosettacode.org//wiki/Prime_decomposition","codeArray":["function run_factorize(input, output) {\n      var n = new BigInteger(input.value, 10);\n      var TWO = new BigInteger(\"2\", 10);\n      var divisor = new BigInteger(\"3\", 10);\n      var prod = false;\n      if (n.compareTo(TWO) < 0) \n          return; \n      output.value = \"\";\n      while (true) {\n          var qr = n.divideAndRemainder(TWO);\n          if (qr[1].equals(BigInteger.ZERO)) {\n              if (prod) \n                  output.value += \"*\"; \n              else \n                  prod = true; \n              output.value += \"2\";\n              n = qr[0];\n          }\n          else \n              break; \n      }\n      while (!n.equals(BigInteger.ONE)) {\n          var qr = n.divideAndRemainder(divisor);\n          if (qr[1].equals(BigInteger.ZERO)) {\n              if (prod) \n                  output.value += \"*\"; \n              else \n                  prod = true; \n              output.value += divisor;\n              n = qr[0];\n          }\n          else \n              divisor = divisor.add(TWO); \n      }\n  }function run_factorize(n) {\n  \tif (n <= 3)\n  \t\t\treturn [n];\n  \tvar ans = [];\n  \tvar done = false;\n  \twhile (!done)\n  \t{\n  \t\tif (n%2 === 0){\n  \t\t\t\tans.push(2);\n  \t\t\t\tn /= 2;\n  \t\t\t\tcontinue;\n  \t\t}\n  \t\tif (n%3 === 0){\n  \t\t\t\tans.push(3);\n  \t\t\t\tn /= 3;\n  \t\t\t\tcontinue;\n  \t\t}\n  \t\tif ( n === 1)\n  \t\t\treturn ans;\n  \t\tvar sr = Math.sqrt(n);\n  \t\tdone = true;\n  \t\t// try to divide the checked number by all numbers till its square root.\n  \t\tfor (var i=6; i<=sr; i+=6){\n  \t\t\t\tif (n%(i-1) === 0){ // is n divisible by i-1?\n  \t\t\t\t\t\tans.push( (i-1) );\n  \t\t\t\t\t\tn /= (i-1);\n  \t\t\t\t\t\tdone = false;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t}\n  \t\t\t\tif (n%(i+1) === 0){ // is n divisible by i+1?\n  \t\t\t\t\t\tans.push( (i+1) );\n  \t\t\t\t\t\tn /= (i+1);\n  \t\t\t\t\t\tdone = false;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t}\n  \t\t}\n  \t}\n  \tans.push( n );\n  \treturn ans;\n  }function factors(n) {\n    if (!n || n < 2)\n      return [];\n    var f = [];\n    for (var i = 2; i <= n; i++){\n      while (n % i === 0){\n        f.push(i);\n        n /= i;\n      }\n    }\n    return f;\n  };\n  Â /// <reference path=\"PrimeFactors.js\" />\n  describe(\"Prime Factors\", function() {\n    it(\"Given nothing, empty is returned\", function() {\n      expect(factors()).toEqual([]);\n    });\n    it(\"Given 1, empty is returned\", function() {\n      expect(factors(1)).toEqual([]);\n    });\n    it(\"Given 2, 2 is returned\", function() {\n      expect(factors(2)).toEqual([2]);\n    });\n    it(\"Given 3, 3 is returned\", function() {\n      expect(factors(3)).toEqual([3]);\n    });\n    it(\"Given 4, 2 and 2 is returned\", function() {\n      expect(factors(4)).toEqual([2, 2]);\n    });\n    it(\"Given 5, 5 is returned\", function() {\n      expect(factors(5)).toEqual([5]);\n    });\n    it(\"Given 6, 2 and 3 is returned\", function() {\n      expect(factors(6)).toEqual([2, 3]);\n    });\n    it(\"Given 7, 7 is returned\", function() {\n      expect(factors(7)).toEqual([7]);\n    });\n    it(\"Given 8; 2, 2, and 2 is returned\", function() {\n      expect(factors(8)).toEqual([2, 2, 2]);\n    });\n    it(\"Given a large number, many primes factors are returned\", function() {\n      expect(factors(2*2*2*3*3*7*11*17))\n        .toEqual([2, 2, 2, 3, 3, 7, 11, 17]);\n    });\n    it(\"Given a large prime number, that number is returned\", function() {\n      expect(factors(997)).toEqual([997]);\n    });\n  });"],"uncertainCodeArray":[],"textArray":[]}