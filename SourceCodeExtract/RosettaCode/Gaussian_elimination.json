{"isSuccess":true,"url":"http://rosettacode.org//wiki/Gaussian_elimination","codeArray":["// Lower Upper Solver\n  function lusolve(A, b, update) {\n  \tvar lu = ludcmp(A, update)\n  \tif (lu === undefined) return // Singular Matrix!\n  \treturn lubksb(lu, b, update)\n  }\n  // Lower Upper Decomposition\n  function ludcmp(A, update) {\n  \t// A is a matrix that we want to decompose into Lower and Upper matrices.\n  \tvar d = true\n  \tvar n = A.length\n  \tvar idx = new Array(n) // Output vector with row permutations from partial pivoting\n  \tvar vv = new Array(n)  // Scaling information\n  \tfor (var i=0; i<n; i++) {\n  \t\tvar max = 0\n  \t\tfor (var j=0; j<n; j++) {\n  \t\t\tvar temp = Math.abs(A[i][j])\n  \t\t\tif (temp > max) max = temp\n  \t\t}\n  \t\tif (max == 0) return // Singular Matrix!\n  \t\tvv[i] = 1 / max // Scaling\n  \t}\n  \tif (!update) { // make a copy of A \n  \t\tvar Acpy = new Array(n)\n  \t\tfor (var i=0; i<n; i++) {\t\t\n  \t\t\tvar Ai = A[i] \n  \t\t\tAcpyi = new Array(Ai.length)\n  \t\t\tfor (j=0; j<Ai.length; j+=1) Acpyi[j] = Ai[j]\n  \t\t\tAcpy[i] = Acpyi\n  \t\t}\n  \t\tA = Acpy\n  \t}\n  \tvar tiny = 1e-20 // in case pivot element is zero\n  \tfor (var i=0; ; i++) {\n  \t\tfor (var j=0; j<i; j++) {\n  \t\t\tvar sum = A[j][i]\n  \t\t\tfor (var k=0; k<j; k++) sum -= A[j][k] * A[k][i];\n  \t\t\tA[j][i] = sum\n  \t\t}\n  \t\tvar jmax = 0\n  \t\tvar max = 0;\n  \t\tfor (var j=i; j<n; j++) {\n  \t\t\tvar sum = A[j][i]\n  \t\t\tfor (var k=0; k<i; k++) sum -= A[j][k] * A[k][i];\n  \t\t\tA[j][i] = sum\n  \t\t\tvar temp = vv[j] * Math.abs(sum)\n  \t\t\tif (temp >= max) {\n  \t\t\t\tmax = temp\n  \t\t\t\tjmax = j\n  \t\t\t}\n  \t\t}\n  \t\tif (i <= jmax) {\n  \t\t\tfor (var j=0; j<n; j++) {\n  \t\t\t\tvar temp = A[jmax][j]\n  \t\t\t\tA[jmax][j] = A[i][j]\n  \t\t\t\tA[i][j] = temp\n  \t\t\t}\n  \t\t\td = !d;\n  \t\t\tvv[jmax] = vv[i]\n  \t\t}\n  \t\tidx[i] = jmax;\n  \t\tif (i == n-1) break;\n  \t\tvar temp = A[i][i]\n  \t\tif (temp == 0) A[i][i] = temp = tiny\n  \t\ttemp = 1 / temp\n  \t\tfor (var j=i+1; j<n; j++) A[j][i] *= temp\n  \t}\n  \treturn {A:A, idx:idx, d:d}\n  }\n  // Lower Upper Back Substitution\n  function lubksb(lu, b, update) {\n  \t// solves the set of n linear equations A*x = b.\n  \t// lu is the object containing A, idx and d as determined by the routine ludcmp.\n  \tvar A = lu.A\n  \tvar idx = lu.idx\n  \tvar n = idx.length\n  \tif (!update) { // make a copy of b\n  \t\tvar bcpy = new Array(n) \n  \t\tfor (var i=0; i<b.length; i+=1) bcpy[i] = b[i]\n  \t\tb = bcpy\n  \t}\n  \tfor (var ii=-1, i=0; i<n; i++) {\n  \t\tvar ix = idx[i]\n  \t\tvar sum = b[ix]\n  \t\tb[ix] = b[i]\n  \t\tif (ii > -1)\n  \t\t\tfor (var j=ii; j<i; j++) sum -= A[i][j] * b[j]\n  \t\telse if (sum)\n  \t\t\tii = i\n  \t\tb[i] = sum\n  \t}\n  \tfor (var i=n-1; i>=0; i--) {\n  \t\tvar sum = b[i]\n  \t\tfor (var j=i+1; j<n; j++) sum -= A[i][j] * b[j]\n  \t\tb[i] = sum / A[i][i]\n  \t}\n  \treturn b // solution vector x\n  }\n  document.write(\n  \tlusolve(\n  \t\t[\n  \t\t\t[1.00, 0.00, 0.00,  0.00,  0.00,   0.00],\n                  \t[1.00, 0.63, 0.39,  0.25,  0.16,   0.10],\n                  \t[1.00, 1.26, 1.58,  1.98,  2.49,   3.13],\n                  \t[1.00, 1.88, 3.55,  6.70, 12.62,  23.80],\n                  \t[1.00, 2.51, 6.32, 15.88, 39.90, 100.28],\n                  \t[1.00, 3.14, 9.87, 31.01, 97.41, 306.02]\n  \t\t],\n      \t\t[-0.01, 0.61, 0.91,  0.99,  0.60,   0.02]\n  \t)\n  )"],"uncertainCodeArray":[],"textArray":[]}