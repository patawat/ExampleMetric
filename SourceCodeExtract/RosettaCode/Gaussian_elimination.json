{"isSuccess":true,"url":"http://rosettacode.org//wiki/Gaussian_elimination","codeArray":["// Lower Upper Solver\nfunction lusolve(A, b, update) {\n    var lu = ludcmp(A, update)\n    if (lu === undefined) return // Singular Matrix!\n    return lubksb(lu, b, update)\n}\n// Lower Upper Decomposition\nfunction ludcmp(A, update) {\n    // A is a matrix that we want to decompose into Lower and Upper matrices.\n    var d = true\n    var n = A.length\n    var idx = new Array(n) // Output vector with row permutations from partial pivoting\n    var vv = new Array(n) // Scaling information\n    for (var i = 0; i < n; i++) {\n        var max = 0\n        for (var j = 0; j < n; j++) {\n            var temp = Math.abs(A[i][j])\n            if (temp > max) max = temp\n        }\n        if (max == 0) return // Singular Matrix!\n        vv[i] = 1 / max // Scaling\n    }\n    if (!update) { // make a copy of A \n        var Acpy = new Array(n)\n        for (var i = 0; i < n; i++) {\n            var Ai = A[i]\n            Acpyi = new Array(Ai.length)\n            for (j = 0; j < Ai.length; j += 1) Acpyi[j] = Ai[j]\n            Acpy[i] = Acpyi\n        }\n        A = Acpy\n    }\n    var tiny = 1e-20 // in case pivot element is zero\n    for (var i = 0;; i++) {\n        for (var j = 0; j < i; j++) {\n            var sum = A[j][i]\n            for (var k = 0; k < j; k++) sum -= A[j][k] * A[k][i];\n            A[j][i] = sum\n        }\n        var jmax = 0\n        var max = 0;\n        for (var j = i; j < n; j++) {\n            var sum = A[j][i]\n            for (var k = 0; k < i; k++) sum -= A[j][k] * A[k][i];\n            A[j][i] = sum\n            var temp = vv[j] * Math.abs(sum)\n            if (temp >= max) {\n                max = temp\n                jmax = j\n            }\n        }\n        if (i <= jmax) {\n            for (var j = 0; j < n; j++) {\n                var temp = A[jmax][j]\n                A[jmax][j] = A[i][j]\n                A[i][j] = temp\n            }\n            d = !d;\n            vv[jmax] = vv[i]\n        }\n        idx[i] = jmax;\n        if (i == n - 1) break;\n        var temp = A[i][i]\n        if (temp == 0) A[i][i] = temp = tiny\n        temp = 1 / temp\n        for (var j = i + 1; j < n; j++) A[j][i] *= temp\n    }\n    return {\n        A: A,\n        idx: idx,\n        d: d\n    }\n}\n// Lower Upper Back Substitution\nfunction lubksb(lu, b, update) {\n    // solves the set of n linear equations A*x = b.\n    // lu is the object containing A, idx and d as determined by the routine ludcmp.\n    var A = lu.A\n    var idx = lu.idx\n    var n = idx.length\n    if (!update) { // make a copy of b\n        var bcpy = new Array(n)\n        for (var i = 0; i < b.length; i += 1) bcpy[i] = b[i]\n        b = bcpy\n    }\n    for (var ii = -1, i = 0; i < n; i++) {\n        var ix = idx[i]\n        var sum = b[ix]\n        b[ix] = b[i]\n        if (ii > -1)\n            for (var j = ii; j < i; j++) sum -= A[i][j] * b[j]\n        else if (sum)\n            ii = i\n        b[i] = sum\n    }\n    for (var i = n - 1; i >= 0; i--) {\n        var sum = b[i]\n        for (var j = i + 1; j < n; j++) sum -= A[i][j] * b[j]\n        b[i] = sum / A[i][i]\n    }\n    return b // solution vector x\n}\ndocument.write(\n    lusolve(\n        [\n            [1.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n            [1.00, 0.63, 0.39, 0.25, 0.16, 0.10],\n            [1.00, 1.26, 1.58, 1.98, 2.49, 3.13],\n            [1.00, 1.88, 3.55, 6.70, 12.62, 23.80],\n            [1.00, 2.51, 6.32, 15.88, 39.90, 100.28],\n            [1.00, 3.14, 9.87, 31.01, 97.41, 306.02]\n        ], [-0.01, 0.61, 0.91, 0.99, 0.60, 0.02]\n    )\n)"],"uncertainCodeArray":[],"textArray":[]}