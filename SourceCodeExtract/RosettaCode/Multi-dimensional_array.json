{"isSuccess":true,"url":"http://rosettacode.org//wiki/Multi-dimensional_array","codeArray":[" function array() {\n  \tvar dimensions= Array.prototype.slice.call(arguments);\n  \tvar N=1, rank= dimensions.length;\n  \tfor (var j= 0; j<rank; j++) N*= dimensions[j];\n  \tthis.dimensions= dimensions;\n  \tthis.values= new Array(N);\n  }\n  <lang>\n  A routine to convert between single dimension indices and multi-dimensional indices can be useful here:\n  <lang javascript>\n  function tobase(base, vals) {\n    var r= 0, len= base.length;\n    for (j= 0; j < len; j++) {\n      r*= base[j];\n      r+= vals[j];\n    }\n    return r;\n  }\n  function frombase(base, val) {\n    var r= new Array(base.length);\n    for (j= base.length-1; j>= 0; j--) {\n      r[j]= val%base[j];\n      val= (val-r[j])/base[j];\n    }\n    return r;\n  }Â \n  array.prototype.index= function() {\n  \tvar indices= Array.prototype.slice.call(arguments);\n  \treturn this.values[tobase(this.dimensions, indices)];\n  }\n  a= new array(6,7,8,9);\n  a.index(2,3,5,6);\n  function array(length) {\n  \tvar rest= Array.prototype.slice.call(arguments);\n  \tvar r= new Array(length);\n  \tif (0<rest.length) {\n  \t\tfor (var j= 0; j<length; j++) {\n  \t\t\tr[j]= array.apply(rest);\n  \t\t}\n  \t}\n  }"],"uncertainCodeArray":[],"textArray":[]}