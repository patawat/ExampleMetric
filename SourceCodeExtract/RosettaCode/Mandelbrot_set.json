{"isSuccess":true,"url":"http://rosettacode.org//wiki/Mandelbrot_set","codeArray":["function mandelIter(cx, cy, maxIter) {\n    var x = 0.0;\n    var y = 0.0;\n    var xx = 0;\n    var yy = 0;\n    var xy = 0;\n    var i = maxIter;\n    while (i-- && xx + yy <= 4) {\n      xy = x * y;\n      xx = x * x;\n      yy = y * y;\n      x = xx - yy + cx;\n      y = xy + xy + cy;\n    }\n    return maxIter - i;\n  }\n  function mandelbrot(canvas, xmin, xmax, ymin, ymax, iterations) {\n    var width = canvas.width;\n    var height = canvas.height;\n    var ctx = canvas.getContext('2d');\n    var img = ctx.getImageData(0, 0, width, height);\n    var pix = img.data;\n    for (var ix = 0; ix < width; ++ix) {\n      for (var iy = 0; iy < height; ++iy) {\n        var x = xmin + (xmax - xmin) * ix / (width - 1);\n        var y = ymin + (ymax - ymin) * iy / (height - 1);\n        var i = mandelIter(x, y, iterations);\n        var ppos = 4 * (width * iy + ix);\n        if (i > iterations) {\n          pix[ppos] = 0;\n          pix[ppos + 1] = 0;\n          pix[ppos + 2] = 0;\n        } else {\n          var c = 3 * Math.log(i) / Math.log(iterations - 1.0);\n          if (c < 1) {\n            pix[ppos] = 255 * c;\n            pix[ppos + 1] = 0;\n            pix[ppos + 2] = 0;\n          }\n          else if ( c < 2 ) {\n            pix[ppos] = 255;\n            pix[ppos + 1] = 255 * (c - 1);\n            pix[ppos + 2] = 0;\n          } else {\n            pix[ppos] = 255;\n            pix[ppos + 1] = 255;\n            pix[ppos + 2] = 255 * (c - 2);\n          }\n        }\n        pix[ppos + 3] = 255;\n      }\n    }\n    ctx.putImageData(img, 0, 0);\n  }\n  var canvas = document.createElement('canvas');\n  canvas.width = 900;\n  canvas.height = 600;\n  document.body.insertBefore(canvas, document.body.childNodes[0]);\n  mandelbrot(canvas, -2, 1, -1, 1, 1000);"],"uncertainCodeArray":[],"textArray":[]}