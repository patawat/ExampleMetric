{"isSuccess":true,"url":"http://rosettacode.org//wiki/Heronian_triangles","codeArray":[" window.onload = function(){\t\n      var list = [];\n      var j = 0;\t\n      for(var c = 1; c <= 200; c++)\n          for(var b = 1; b <= c; b++)\n              for(var a = 1; a <= b; a++)\n  \t        if(gcd(gcd(a, b), c) == 1 && isHeron(heronArea(a, b, c)))\t\t\t\t\t\t\t\n  \t\t    list[j++] = new Array(a, b, c, a + b + c, heronArea(a, b, c));\n      sort(list);\t\n      document.write(\"<h2>Primitive Heronian triangles with sides up to 200: \" + list.length + \"</h2><h3>First ten when ordered by increasing area, then perimeter:</h3><table><tr><th>Sides</th><th>Perimeter</th><th>Area</th><tr>\");\n      for(var i = 0; i < 10; i++)\n  \tdocument.write(\"<tr><td>\" + list[i][0] + \" x \" + list[i][1] + \" x \" + list[i][2] + \"</td><td>\" + list[i][3] + \"</td><td>\" + list[i][4] + \"</td></tr>\");\n      document.write(\"</table><h3>Area = 210</h3><table><tr><th>Sides</th><th>Perimeter</th><th>Area</th><tr>\");\n      for(var i = 0; i < list.length; i++)\n  \tif(list[i][4] == 210)\n  \t    document.write(\"<tr><td>\" + list[i][0] + \" x \" + list[i][1] + \" x \" + list[i][2] + \"</td><td>\" + list[i][3] + \"</td><td>\" + list[i][4] + \"</td></tr>\");    \t\t\n      function heronArea(a, b, c){\n  \tvar s = (a + b + c)/ 2;\n  \treturn Math.sqrt(s *(s -a)*(s - b)*(s - c));\t\t\n      }\t\n      function isHeron(h){\n          return h % 1 == 0 && h > 0;\n      }\t\n      function gcd(a, b){\n  \tvar leftover = 1, dividend = a > b ? a : b, divisor = a > b ? b : a;\t\t\n  \twhile(leftover != 0){\n  \t    leftover = dividend % divisor;\n  \t    if(leftover > 0){\n  \t\tdividend = divisor;\n  \t\tdivisor = leftover;\n  \t    }\n  \t}\t\t\n  \treturn divisor;\n      }\t\n      function sort(list){\n  \tvar swapped = true;\n  \tvar temp = [];\n  \twhile(swapped){\n  \t    swapped = false;\n  \t    for(var i = 1; i < list.length; i++){\n  \t\tif(list[i][4] < list[i - 1][4] || list[i][4] == list[i - 1][4] && list[i][3] < list[i - 1][3]){\n  \t\t    temp = list[i];\n  \t\t    list[i] = list[i - 1];\n  \t\t    list[i - 1] = temp;\n  \t\t    swapped = true;\n  \t\t}\t\t\t\t\n  \t    }\t\t\t\n  \t}\n      }\n  }\n  Â (function (n) {\n    var chain = function (xs, f) {                  // Monadic bind/chain\n        return [].concat.apply([], xs.map(f));\n      },\n      hArea = function (x, y, z) {\n        var s = (x + y + z) / 2,\n          a = s * (s - x) * (s - y) * (s - z);\n        return a ? Math.sqrt(a) : 0;\n      },\n      gcd = function (m, n) { return n ? gcd(n, m % n) : m; },\n      rng = function (m, n) {\n        return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n          return m + i;\n        });\n      },\n      sum = function (a, x) { return a + x; };\n    // DEFINING THE SORTED SUB-SET IN TERMS OF A LIST MONAD\n    var lstHeron = chain( rng(1, n), function (x) {\n            return chain( rng(x, n), function (y) {\n            return chain( rng(y, n), function (z) {\n          return (\n            (x + y > z) &&\n            gcd(gcd(x, y), z) === 1 &&            // Primitive.\n            (function () {                        // Heronian.\n              var a = hArea(x, y, z);\n              return a && (a === parseInt(a, 10))\n            })()\n          ) ? [[x, y, z]] : [];                   // Monadic inject or fail\n    })})}).sort(function (a, b) {\n      var dArea = hArea.apply(null, a) - hArea.apply(null, b);\n      if (dArea) return dArea;\n      else {\n        var dPerim = a.reduce(sum, 0) - b.reduce(sum, 0);\n        return dPerim ? dPerim : (a[2] - b[2]);\n      }\n    });\n    // OUPUT FORMATTED AS TWO WIKITABLES\n    var lstColumns = ['Sides Perimeter Area'.split(' ')],\n      fnData = function (lst) {\n        return [JSON.stringify(lst), lst.reduce(sum, 0), hArea.apply(null, lst)];\n      },\n      wikiTable = function (lstRows, blnHeaderRow, strStyle) {\n        return '{| class=\"wikitable\" ' + (\n          strStyle ? 'style=\"' + strStyle + '\"' : ''\n        ) + lstRows.map(function (lstRow, iRow) {\n          var strDelim = ((blnHeaderRow && !iRow) ? '!' : '|');\n          return '\\n|-\\n' + strDelim + ' ' + lstRow.map(function (v) {\n            return typeof v === 'undefined' ? ' ' : v;\n          }).join(' ' + strDelim + strDelim + ' ');\n        }).join('') + '\\n|}';\n      };\n    return 'Found: ' + lstHeron.length +\n      ' primitive Heronian triangles with sides up to ' + n + '.\\n\\n' +\n      '(Showing first 10, sorted by increasing area, ' +\n      'perimeter, and longest side)\\n\\n' +\n      wikiTable(\n        lstColumns.concat(lstHeron.slice(0, 10).map(fnData)),\n        true\n      ) + '\\n\\n' +\n      'All primitive Heronian triangles in this range where area = 210\\n' +\n      '\\n(also in order of increasing perimeter and longest side)\\n\\n' +\n      wikiTable(\n        lstColumns.concat(lstHeron.filter(function (x) {\n          return 210 === hArea.apply(null, x);\n        }).map(fnData)),\n        true\n      ) + '\\n\\n';\n  })(200);"],"uncertainCodeArray":[],"textArray":[]}