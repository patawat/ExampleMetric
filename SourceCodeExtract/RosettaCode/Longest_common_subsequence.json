{"isSuccess":true,"url":"http://rosettacode.org//wiki/Longest_common_subsequence","codeArray":["function lcs(a, b) {\n    var aSub = a.substr(0, a.length - 1);\n    var bSub = b.substr(0, b.length - 1);\n    if (a.length === 0 || b.length === 0) {\n        return '';\n    } else if (a.charAt(a.length - 1) === b.charAt(b.length - 1)) {\n        return lcs(aSub, bSub) + a.charAt(a.length - 1);\n    } else {\n        var x = lcs(a, bSub);\n        var y = lcs(aSub, b);\n        return (x.length > y.length) ? x : y;\n    }\n}"," var longest = (xs, ys) => (xs.length > ys.length) ? xs : ys;\n var lcs = (xx, yy) => {\n     if (!xx.length || !yy.length) {\n         return '';\n     }\n     var x = xx[0],\n         y = yy[0];\n     xs = xx.slice(1);\n     ys = yy.slice(1);\n     return (x === y) ? lcs(xs, ys) :\n         longest(lcs(xx, ys), lcs(xs, yy));\n };","function lcs(x, y) {\n    var s, i, j, m, n,\n        lcs = [],\n        row = [],\n        c = [],\n        left, diag, latch;\n    //make sure shorter string is the column string\n    if (m < n) {\n        s = x;\n        x = y;\n        y = s;\n    }\n    m = x.length;\n    n = y.length;\n    //build the c-table\n    for (j = 0; j < n; row[j++] = 0);\n    for (i = 0; i < m; i++) {\n        c[i] = row = row.slice();\n        for (diag = 0, j = 0; j < n; j++, diag = latch) {\n            latch = row[j];\n            if (x[i] == y[j]) {\n                row[j] = diag + 1;\n            } else {\n                left = row[j - 1] || 0;\n                if (left > row[j]) {\n                    row[j] = left;\n                }\n            }\n        }\n    }\n    i--, j--;\n    //row[j] now contains the length of the lcs\n    //recover the lcs from the table\n    while (i > -1 && j > -1) {\n        switch (c[i][j]) {\n            default: j--;\n            lcs.unshift(x[i]);\n            case (i && c[i - 1][j]):\n                    i--;\n                continue;\n            case (j && c[i][j - 1]):\n                    j--;\n        }\n    }\n    return lcs.join('');\n}","\tvar t = i;\n\twhile (i > -1 && j > -1) {\n\t    switch (c[i][j]) {\n\t        default: i--,\n\t        j--;\n\t        continue;\n\t        case (i && c[i - 1][j]):\n\t                if (t !== i) {\n\t                    lcs.unshift(x.substring(i + 1, t + 1));\n\t                }\n\t            t = --i;\n\t            continue;\n\t        case (j && c[i][j - 1]):\n\t                j--;\n\t            if (t !== i) {\n\t                lcs.unshift(x.substring(i + 1, t + 1));\n\t            }\n\t            t = i;\n\t    }\n\t}\n\tif (t !== i) {\n\t    lcs.unshift(x.substring(i + 1, t + 1));\n\t}","function lcs_greedy(x, y) {\n    var p1, i, idx,\n        symbols = {},\n        r = 0,\n        p = 0,\n        l = 0,\n        m = x.length,\n        n = y.length,\n        s = new Buffer((m < n) ? n : m);\n    p1 = popsym(0);\n    for (i = 0; i < m; i++) {\n        p = (r === p) ? p1 : popsym(i);\n        p1 = popsym(i + 1);\n        if (p > p1) {\n            i += 1;\n            idx = p1;\n        } else {\n            idx = p;\n        }\n        if (idx === n) {\n            p = popsym(i);\n        } else {\n            r = idx;\n            s[l] = x.charCodeAt(i);\n            l += 1;\n        }\n    }\n    return s.toString('utf8', 0, l);\n\n    function popsym(index) {\n        var s = x[index],\n            pos = symbols[s] + 1;\n        pos = y.indexOf(s, ((pos > r) ? pos : r));\n        if (pos === -1) {\n            pos = n;\n        }\n        symbols[s] = pos;\n        return pos;\n    }\n}","lcs_greedy('bcaaaade', 'deaaaabc'); // 'bc' instead of 'aaaa'"],"uncertainCodeArray":[],"textArray":[]}