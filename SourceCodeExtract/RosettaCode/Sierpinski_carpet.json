{"isSuccess":true,"url":"http://rosettacode.org//wiki/Sierpinski_carpet","codeArray":["// Orders 1, 2 and 3 of the Sierpinski Carpet\n  // as lines of text.\n  // Generic text output for use in any JavaScript environment\n  // Browser JavaScripts may use console.log() to return textual output\n  // others use print() or analogous functions.\n  [1, 2, 3].map(function sierpinskiCarpetOrder(n) {\n      // An (n * n) grid of (filled or empty) sub-rectangles\n      // n --> [[s]]\n      var carpet = function (n) {\n              var lstN = range(0, Math.pow(3, n) - 1);\n              // State of each cell in an N * N grid\n              return lstN.map(function (x) {\n                  return lstN.map(function (y) {\n                      return inCarpet(x, y);\n                  });\n              });\n          },\n          // State of a given coordinate in the grid:\n          // Filled or notÂ ?\n          // (See https://en.wikipedia.org/wiki/Sierpinski_carpet#Construction)\n          // n --> n --> bool\n          inCarpet = function (x, y) {\n              return (!x || !y) ? true :\n                  !(\n                      (x % 3 === 1) &&\n                      (y % 3 === 1)\n                  ) && inCarpet(\n                      x / 3 | 0,\n                      y / 3 | 0\n                  );\n          },\n          // Sequence of integers from m to n\n          // n --> n --> [n]\n          range = function (m, n) {\n              return Array.apply(null, Array(n - m + 1)).map(\n                  function (x, i) {\n                      return m + i;\n                  }\n              );\n          };\n      // Grid of booleans mapped to lines of characters\n      // [[bool]] --> s\n      return carpet(n).map(function (line) {\n          return line.map(function (bool) {\n              return bool ? '\\u2588' : ' ';\n          }).join('');\n      }).join('\\n');\n  }).join('\\n\\n');"],"uncertainCodeArray":[],"textArray":[]}