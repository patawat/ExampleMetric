{"isSuccess":true,"url":"http://rosettacode.org//wiki/Find_the_missing_permutation","codeArray":["permute = function(v, m){ //v1.0\n      for(var p = -1, j, k, f, r, l = v.length, q = 1, i = l + 1; --i; q *= i);\n      for(x = [new Array(l), new Array(l), new Array(l), new Array(l)], j = q, k = l + 1, i = -1;\n          ++i < l; x[2][i] = i, x[1][i] = x[0][i] = j /= --k);\n      for(r = new Array(q); ++p < q;)\n          for(r[p] = new Array(l), i = -1; ++i < l; !--x[1][i] && (x[1][i] = x[0][i],\n              x[2][i] = (x[2][i] + 1) % l), r[p][i] = m ? x[3][i] : v[x[3][i]])\n              for(x[3][i] = x[2][i], f = 0; !f; f = !f)\n                  for(j = i; j; x[3][--j] == x[2][i] && (x[3][i] = x[2][i] = (x[2][i] + 1) % l, f = 1));\n      return r;\n  };\n  list = [ 'ABCD', 'CABD', 'ACDB', 'DACB', 'BCDA', 'ACBD', 'ADCB', 'CDAB',\n          'DABC', 'BCAD', 'CADB', 'CDBA', 'CBAD', 'ABDC', 'ADBC', 'BDCA',\n          'DCBA', 'BACD', 'BADC', 'BDAC', 'CBDA', 'DBCA', 'DCAB'];\n  all = permute(list[0].split('')).map(function(elem) {return elem.join('')});\n  missing = all.filter(function(elem) {return list.indexOf(elem) == -1});\n  print(missing);  // ==> DBAC(function (strList) {\n      // [a] -> [[a]]\n      function permutations(xs) {\n          return xs.length ? (\n              chain(xs, function (x) {\n                  return chain(permutations(deleted(x, xs)), function (ys) {\n                      return [[x].concat(ys).join('')];\n                  })\n              })) : [[]];\n      }\n      // Monadic bind/chain for lists\n      // [a] -> (a -> b) -> [b]\n      function chain(xs, f) {\n          return [].concat.apply([], xs.map(f));\n      }\n      // a -> [a] -> [a]\n      function deleted(x, xs) {\n          return xs.length ? (\n              x === xs[0] ? xs.slice(1) : [xs[0]].concat(\n                  deleted(x, xs.slice(1))\n              )\n          ) : [];\n      }\n      // Provided subset\n      var lstSubSet = strList.split('\\n');\n      // Any missing permutations\n      // (we can use fold/reduce, filter, or chain (concat map) here)\n      return chain(permutations('ABCD'.split('')), function (x) {\n          return lstSubSet.indexOf(x) === -1 ? [x] : [];\n      });\n  })(\n      'ABCD\\nCABD\\nACDB\\nDACB\\nBCDA\\nACBD\\nADCB\\nCDAB\\nDABC\\nBCAD\\nCADB\\n\\\n  CDBA\\nCBAD\\nABDC\\nADBC\\nBDCA\\nDCBA\\nBACD\\nBADC\\nBDAC\\nCBDA\\nDBCA\\nDCAB'\n  );[\"DBAC\"]"],"uncertainCodeArray":[],"textArray":[]}