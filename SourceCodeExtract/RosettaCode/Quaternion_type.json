{"isSuccess":true,"url":"http://rosettacode.org//wiki/Quaternion_type","codeArray":["var Quaternion = (function() {\n    // The Q() function takes an array argument and changes it\n    // prototype so that it becomes a Quaternion instance.  This is\n    // scoped only for prototype member access.\n    function Q(a) {\n        a.__proto__ = proto;\n        return a;\n    }\n    // Actual constructor.  This constructor converts its arguments to\n    // an array, then that array to a Quaternion instance, then\n    // returns that instance.  (using \"new\" with this constructor is\n    // optional)\n    function Quaternion() {\n        return Q(Array.prototype.slice.call(arguments, 0, 4));\n    }\n    // Prototype for all Quaternions\n    const proto = {\n        // Inherits from a 4-element Array\n        __proto__: [0, 0, 0, 0],\n        // Properties -- In addition to Array[0..3] access, we\n        // also define matching a, b, c, and d properties\n        get a() this[0],\n        get b() this[1],\n        get c() this[2],\n        get d() this[3],\n        // Methods\n        norm: function() Math.sqrt(this.map(function(x) x * x).reduce(function(x, y) x + y)),\n        negate: function() Q(this.map(function(x) - x)),\n        conjugate: function() Q([this[0]].concat(this.slice(1).map(function(x) - x))),\n        add: function(x) {\n            if (\"number\" === typeof x) {\n                return Q([this[0] + x].concat(this.slice(1)));\n            } else {\n                return Q(this.map(function(v, i) v + x[i]));\n            }\n        },\n        mul: function(r) {\n            var q = this;\n            if (\"number\" === typeof r) {\n                return Q(q.map(function(e) e * r));\n            } else {\n                return Q([q[0] * r[0] - q[1] * r[1] - q[2] * r[2] - q[3] * r[3],\n                    q[0] * r[1] + q[1] * r[0] + q[2] * r[3] - q[3] * r[2],\n                    q[0] * r[2] - q[1] * r[3] + q[2] * r[0] + q[3] * r[1],\n                    q[0] * r[3] + q[1] * r[2] - q[2] * r[1] + q[3] * r[0]\n                ]);\n            }\n        },\n        equals: function(q) this.every(function(v, i) v === q[i]),\n        toString: function()(this[0] + \" + \" + this[1] + \"i + \" + this[2] + \"j + \" + this[3] + \"k\").replace(/\\+ -/g, '- ')\n    };\n    Quaternion.prototype = proto;\n    return Quaternion;\n})();","var q = Quaternion(1, 2, 3, 4);\nvar q1 = Quaternion(2, 3, 4, 5);\nvar q2 = Quaternion(3, 4, 5, 6);\nvar r = 7;\nconsole.log(\"q = \" + q);\nconsole.log(\"q1 = \" + q1);\nconsole.log(\"q2 = \" + q2);\nconsole.log(\"r = \" + r);\nconsole.log(\"1. q.norm() = \" + q.norm());\nconsole.log(\"2. q.negate() = \" + q.negate());\nconsole.log(\"3. q.conjugate() = \" + q.conjugate());\nconsole.log(\"4. q.add(r) = \" + q.add(r));\nconsole.log(\"5. q1.add(q2) = \" + q1.add(q2));\nconsole.log(\"6. q.mul(r) = \" + q.mul(r));\nconsole.log(\"7.a. q1.mul(q2) = \" + q1.mul(q2));\nconsole.log(\"7.b. q2.mul(q1) = \" + q2.mul(q1));\nconsole.log(\"8. q1.mul(q2) \" + (q1.mul(q2).equals(q2.mul(q1)) ? \"==\" : \"!=\") + \" q2.mul(q1)\");"],"uncertainCodeArray":[],"textArray":[]}