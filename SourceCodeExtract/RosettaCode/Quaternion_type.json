{"isSuccess":true,"url":"http://rosettacode.org//wiki/Quaternion_type","codeArray":["var Quaternion = (function() {\n      // The Q() function takes an array argument and changes it\n      // prototype so that it becomes a Quaternion instance.  This is\n      // scoped only for prototype member access.\n      function Q(a) {\n  \ta.__proto__ = proto;\n  \treturn a;\n      }\n      // Actual constructor.  This constructor converts its arguments to\n      // an array, then that array to a Quaternion instance, then\n      // returns that instance.  (using \"new\" with this constructor is\n      // optional)\n      function Quaternion() {\n  \treturn Q(Array.prototype.slice.call(arguments, 0, 4));\n      }\n      // Prototype for all Quaternions\n      const proto = {\n  \t// Inherits from a 4-element Array\n  \t__proto__ : [0,0,0,0],\n  \t// Properties -- In addition to Array[0..3] access, we\n  \t// also define matching a, b, c, and d properties\n  \tget a() this[0],\n  \tget b() this[1],\n  \tget c() this[2],\n  \tget d() this[3],\n  \t// Methods\n  \tnorm : function() Math.sqrt(this.map(function(x) x*x).reduce(function(x,y) x+y)),\n  \tnegate : function() Q(this.map(function(x) -x)),\n  \tconjugate : function() Q([ this[0] ].concat(this.slice(1).map(function(x) -x))),\n  \tadd : function(x) {\n  \t    if (\"number\" === typeof x) {\n  \t\treturn Q([ this[0] + x ].concat(this.slice(1)));\n  \t    } else {\n  \t\treturn Q(this.map(function(v,i) v+x[i]));\n  \t    }\n  \t},\n  \tmul : function(r) {\n  \t    var q = this;\n  \t    if (\"number\" === typeof r) {\n  \t\treturn Q(q.map(function(e) e*r));\n  \t    } else {\n  \t\treturn Q([ q[0] * r[0] - q[1] * r[1] - q[2] * r[2] - q[3] * r[3],\n  \t\t\t   q[0] * r[1] + q[1] * r[0] + q[2] * r[3] - q[3] * r[2],\n  \t\t\t   q[0] * r[2] - q[1] * r[3] + q[2] * r[0] + q[3] * r[1],\n  \t\t\t   q[0] * r[3] + q[1] * r[2] - q[2] * r[1] + q[3] * r[0] ]);\n  \t    }\n  \t},\n  \tequals : function(q) this.every(function(v,i) v === q[i]),\n  \ttoString : function() (this[0] + \" + \" + this[1] + \"i + \"+this[2] + \"j + \" + this[3] + \"k\").replace(/\\+ -/g, '- ')\n      };\n      Quaternion.prototype = proto;\n      return Quaternion;\n  })();var q = Quaternion(1,2,3,4);\n  var q1 = Quaternion(2,3,4,5);\n  var q2 = Quaternion(3,4,5,6);\n  var r = 7;\n  console.log(\"q = \"+q);\n  console.log(\"q1 = \"+q1);\n  console.log(\"q2 = \"+q2);\n  console.log(\"r = \"+r);\n  console.log(\"1. q.norm() = \"+q.norm());\n  console.log(\"2. q.negate() = \"+q.negate());\n  console.log(\"3. q.conjugate() = \"+q.conjugate());\n  console.log(\"4. q.add(r) = \"+q.add(r));\n  console.log(\"5. q1.add(q2) = \"+q1.add(q2));\n  console.log(\"6. q.mul(r) = \"+q.mul(r));\n  console.log(\"7.a. q1.mul(q2) = \"+q1.mul(q2));\n  console.log(\"7.b. q2.mul(q1) = \"+q2.mul(q1));\n  console.log(\"8. q1.mul(q2) \" + (q1.mul(q2).equals(q2.mul(q1)) ? \"==\" : \"!=\") + \" q2.mul(q1)\");"],"uncertainCodeArray":[],"textArray":[]}