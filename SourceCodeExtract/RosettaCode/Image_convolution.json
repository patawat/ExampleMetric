{"isSuccess":true,"url":"http://rosettacode.org//wiki/Image_convolution","codeArray":["// Image imageIn, Array kernel, function (Error error, Image imageOut)\n// precondition: Image is loaded\n// returns loaded Image to asynchronous callback function\nfunction convolve(imageIn, kernel, callback) {\n    var dim = Math.sqrt(kernel.length),\n        pad = Math.floor(dim / 2);\n    if (dim % 2 !== 1) {\n        return callback(new RangeError(\"Invalid kernel dimension\"), null);\n    }\n    var w = imageIn.width,\n        h = imageIn.height,\n        can = document.createElement('canvas'),\n        cw,\n        ch,\n        ctx,\n        imgIn, imgOut,\n        datIn, datOut;\n    can.width = cw = w + pad * 2; // add padding\n    can.height = ch = h + pad * 2; // add padding\n    ctx = can.getContext('2d');\n    ctx.fillStyle = '#000'; // fill with opaque black\n    ctx.fillRect(0, 0, cw, ch);\n    ctx.drawImage(imageIn, pad, pad);\n    imgIn = ctx.getImageData(0, 0, cw, ch);\n    datIn = imgIn.data;\n    imgOut = ctx.createImageData(w, h);\n    datOut = imgOut.data;\n    var row, col, pix, i, dx, dy, r, g, b;\n    for (row = pad; row <= h; row++) {\n        for (col = pad; col <= w; col++) {\n            r = g = b = 0;\n            for (dx = -pad; dx <= pad; dx++) {\n                for (dy = -pad; dy <= pad; dy++) {\n                    i = (dy + pad) * dim + (dx + pad); // kernel index\n                    pix = 4 * ((row + dy) * cw + (col + dx)); // image index\n                    r += datIn[pix++] * kernel[i];\n                    g += datIn[pix++] * kernel[i];\n                    b += datIn[pix] * kernel[i];\n                }\n            }\n            pix = 4 * ((row - pad) * w + (col - pad)); // destination index\n            datOut[pix++] = (r + .5) ^ 0;\n            datOut[pix++] = (g + .5) ^ 0;\n            datOut[pix++] = (b + .5) ^ 0;\n            datOut[pix] = 255; // we want opaque image\n        }\n    }\n    // reuse canvas\n    can.width = w;\n    can.height = h;\n    ctx.putImageData(imgOut, 0, 0);\n    var imageOut = new Image();\n    imageOut.addEventListener('load', function() {\n        callback(null, imageOut);\n    });\n    imageOut.addEventListener('error', function(error) {\n        callback(error, null);\n    });\n    imageOut.src = can.toDataURL('image/png');\n}"],"uncertainCodeArray":[],"textArray":[]}