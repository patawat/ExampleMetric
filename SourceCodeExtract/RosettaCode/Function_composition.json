{"isSuccess":true,"url":"http://rosettacode.org//wiki/Function_composition","codeArray":["function compose(f, g) {\n    return function(x) {\n      return f(g(x));\n    };\n  }var id = compose(Math.sin, Math.asin);\n  print(id(0.5)); // 0.5(function () {\n      'use strict';\n      // iterativeComposed :: [f] -> f\n      function iterativeComposed(fs) {\n          return function (x) {\n              var i = fs.length,\n                  e = x;\n              while (i--) e = fs[i](e);\n              return e;\n          }\n      }\n      // foldComposed :: [f] -> f\n      function foldComposed(fs) {\n          return function (x) {\n              return fs\n                  .reduceRight(function (a, f) {\n                      return f(a);\n                  }, x);\n          };\n      }\n      var sqrt = Math.sqrt,\n          succ = function (x) {\n              return x + 1;\n          },\n          half = function (x) {\n              return x / 2;\n          };\n      // Testing two different multiple composition ([f] -> f) functions\n      return [iterativeComposed, foldComposed]\n          .map(function (compose) {\n              // both functions compose from right to left\n              return compose([half, succ, sqrt])(5);\n          });\n  })();"],"uncertainCodeArray":[],"textArray":[]}