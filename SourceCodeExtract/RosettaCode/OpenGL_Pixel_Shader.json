{"isSuccess":true,"url":"http://rosettacode.org//wiki/OpenGL_Pixel_Shader","codeArray":["<html style=\"margin: 0;\">\n    <head>\n      <title>Fragment Shader WebGL Example</title>\n      <!-- This use of <script> elements is so that we can have multiline text\n           without quoting it inside of JavaScript; the web browser doesn't\n           actually do anything besides store the text of these. -->\n      <script id=\"shader-fs\" type=\"text/x-fragment_shader\">\n        precision highp float;\n        uniform float u_time;\n        void main(void) {\n          // some gobbledegook\n          vec3 foo = vec3(pow(gl_FragCoord.xy, vec2(1.0 + sin(dot(vec4(1.0, 100.0, 0.0, 0.0), gl_FragCoord)))), 0.0);\n          foo *= mat3(1.2, 3.9, 1.4, 4.1, 0.2, 1.4, 2.5, 1.6, 7.2);\n          gl_FragColor = vec4(mod(foo + vec3(u_time), 1.0), 1.0);\n        }\n      </script>\n      <script id=\"shader-vs\" type=\"text/x-vertex_shader\">\n        attribute vec3 a_position;\n        attribute vec4 a_color;\n        varying vec4 v_color;\n        void main(void) {\n          gl_Position = vec4(a_position, 1.0);\n          v_color = a_color;\n        }\n      </script>\n      <script type=\"text/javascript\">\n        function getShader(gl, id) {\n          var scriptElement = document.getElementById(id);\n          // Create shader object\n          var shader;\n          shader= gl.createShader(gl[scriptElement.type.replace('text/x-','').toUpperCase()]);\n          // Compile shader from source\n          gl.shaderSource(shader, scriptElement.textContent);\n          gl.compileShader(shader);\n          if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            throw new Error(gl.getShaderInfoLog(shader));\n          return shader;\n        }\n      </script>\n    </head>\n    <body style=\"margin: 0;\">\n      <canvas id=\"glcanvas\" style=\"border: none; margin: auto; display: block;\" width=\"640\" height=\"480\"></canvas>\n      <script type=\"text/javascript\">\n        var canvas = document.getElementById(\"glcanvas\");\n        // Get WebGL context.\n        var gl = canvas.getContext(\"webgl\")\n              || canvas.getContext(\"experimental-webgl\");\n        if (!gl)\n          throw new Error(\"WebGL context not found\");\n        // Create shader program from vertex and fragment shader code.\n        var shaderProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, getShader(gl, \"shader-vs\"));\n        gl.attachShader(shaderProgram, getShader(gl, \"shader-fs\"));\n        gl.linkProgram(shaderProgram);\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))\n          throw new Error(gl.getProgramInfoLog(shaderProgram));\n        // Specify to render using that program.\n        gl.useProgram(shaderProgram);\n        // Get the indexes to communicate vertex attributes to the program.\n        var positionAttr = gl.getAttribLocation(shaderProgram, \"a_position\");\n        // And specify that we will be actually delivering data to those attributes.\n        gl.enableVertexAttribArray(positionAttr);\n        var timeUniform = gl.getUniformLocation(shaderProgram, \"u_time\");\n        // Store vertex positions and colors in array buffer objects.\n        var vertices;\n        var positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices = [\n          -0.5, -0.5, 0,\n          +0.5, -0.5, 0,\n          -0.5, +0.5, 0\n        ]), gl.STATIC_DRAW);\n        var numVertices = vertices.length / 3; // 3 coordinates per vertex\n        // Set GL state\n        gl.clearColor(0.3, 0.3, 0.3, 1.0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.viewport(0, 0, gl.drawingBufferWidth || canvas.width,\n                          gl.drawingBufferHeight || canvas.height);\n        //Specify the array data to render. \n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.vertexAttribPointer(positionAttr, 3, gl.FLOAT, false, 0, 0);\n        var t0 = Date.now();\n        function frame() {\n          gl.uniform1f(timeUniform, (Date.now() - t0) / 1000);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n          gl.drawArrays(gl.TRIANGLES, 0, numVertices);\n          var e;\n          while (e = gl.getError())\n            console.log(\"GL error\", e);\n        }\n        setInterval(frame, 1000/20);\n      </script>\n    </body>\n  </html>"],"uncertainCodeArray":[],"textArray":[]}