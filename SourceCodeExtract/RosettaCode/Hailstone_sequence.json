{"isSuccess":true,"url":"http://rosettacode.org//wiki/Hailstone_sequence","codeArray":["function hailstone(n) {\n    var seq = [n];\n    while (n > 1) {\n        n = n % 2 ? 3 * n + 1 : n / 2;\n        seq.push(n);\n    }\n    return seq;\n}\n// task 2: verify the sequence for n = 27\nvar h = hailstone(27),\n    hLen = h.length;\nprint(\"sequence 27 is (\" + h.slice(0, 4).join(\", \") + \" ... \" +\n    h.slice(hLen - 4, hLen).join(\", \") + \"). length: \" + hLen);\n// task 3: find the longest sequence for n < 100000\nfor (var n, max = 0, i = 100000; --i;) {\n    var seq = hailstone(i),\n        sLen = seq.length;\n    if (sLen > max) {\n        n = i;\n        max = sLen;\n    }\n}\nprint(\"longest sequence: \" + max + \" numbers for starting point \" + n);","(function() {\n    // Hailstone Sequence\n    // n -> [n]\n    function hailstone(n) {\n        return n === 1 ? [1] : (\n            [n].concat(\n                hailstone(n % 2 ? n * 3 + 1 : n / 2)\n            )\n        )\n    }\n    var lstCollatz27 = hailstone(27);\n    return {\n        length: lstCollatz27.length,\n        sequence: lstCollatz27\n    };\n})();","{\n    \"length\": 112,\n    \"sequence\": [27, 82, 41, 124, 62, 31, 94, 47, 142, 71, 214,\n        107, 322, 161, 484, 242, 121, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350,\n        175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167, 502, 251, 754, 377,\n        1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479, 1438, 719, 2158, 1079, 3238, 1619, 4858,\n        2429, 7288, 3644, 1822, 911, 2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577,\n        1732, 866, 433, 1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53, 160, 80,\n        40, 20, 10, 5, 16, 8, 4, 2, 1\n    ]\n}","(function() {\n    function memoized(fn) {\n        var dctMemo = {};\n        return function(x) {\n            var varValue = dctMemo[x];\n            if ('u' === (typeof varValue)[0])\n                dctMemo[x] = varValue = fn(x);\n            return varValue;\n        };\n    }\n    // Hailstone Sequence\n    // n -> [n]\n    function hailstone(n) {\n        return n === 1 ? [1] : (\n            [n].concat(\n                hailstone(n % 2 ? n * 3 + 1 : n / 2)\n            )\n        )\n    }\n    // Derived a memoized version of the function,\n    //  which can reuse previously calculated paths\n    var fnCollatz = memoized(hailstone);\n    // Iterative version of range\n    // [m..n]\n    function range(m, n) {\n        var a = Array(n - m + 1),\n            i = n + 1;\n        while (i--) a[i - 1] = i;\n        return a;\n    }\n    // Fold/reduce over an array to find the maximum length\n    function longestBelow(n) {\n        return range(1, n).reduce(\n            function(a, x, i) {\n                var lng = fnCollatz(x).length;\n                return lng > a.l ? {\n                    n: i + 1,\n                    l: lng\n                } : a\n            }, {\n                n: 0,\n                l: 0\n            }\n        )\n    }\n    return longestBelow(100000);\n})();","// Number, length of sequence\n{\n    \"n\": 77031,\n    \"l\": 351\n}","(function(n) {\n    var dctMemo = {};\n    // Length only of hailstone sequence\n    // n -> n\n    function collatzLength(n) {\n        var i = 1,\n            a = n,\n            lng;\n        while (a !== 1) {\n            lng = dctMemo[a];\n            if ('u' === (typeof lng)[0]) {\n                a = (a % 2 ? 3 * a + 1 : a / 2);\n                i++;\n            } else return lng + i - 1;\n        }\n        return i;\n    }\n    // Iterative version of range\n    // [m..n]\n    function range(m, n) {\n        var a = Array(n - m + 1),\n            i = n + 1;\n        while (i--) a[i - 1] = i;\n        return a;\n    }\n    // Fold/reduce over an array to find the maximum length\n    function longestBelow(n) {\n        return range(1, n).reduce(\n            function(a, x) {\n                var lng = dctMemo[x] || (dctMemo[x] = collatzLength(x));\n                return lng > a.l ? {\n                    n: x,\n                    l: lng\n                } : a\n            }, {\n                n: 0,\n                l: 0\n            }\n        )\n    }\n    return [100000, 1000000, 10000000].map(longestBelow);\n})();","[{\n        \"n\": 77031,\n        \"l\": 351\n    }, // 100,000\n    {\n        \"n\": 837799,\n        \"l\": 525\n    }, // 1,000,000\n    {\n        \"n\": 8400511,\n        \"l\": 686\n    } // 10,000,000\n]","longestBelow(100000000) -\n    > {\n        \"n\": 63728127,\n        \"l\": 950\n    }"],"uncertainCodeArray":[],"textArray":[]}