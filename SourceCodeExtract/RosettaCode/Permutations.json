{"isSuccess":true,"url":"http://rosettacode.org//wiki/Permutations","codeArray":["var d = document.getElementById('result');\n\nfunction perm(list, ret) {\n    if (list.length == 0) {\n        var row = document.createTextNode(ret.join(' ') + '\\n');\n        d.appendChild(row);\n        return;\n    }\n    for (var i = 0; i < list.length; i++) {\n        var x = list.splice(i, 1);\n        ret.push(x);\n        perm(list, ret);\n        ret.pop();\n        list.splice(i, 0, x);\n    }\n}\nperm([1, 2, 'A', 4], []);","(function() {\n    // [a] -> [[a]]\n    function permutations(xs) {\n        return xs.length ? (concatMap(\n            function(x) {\n                return concatMap(\n                    function(ys) {\n                        return ([\n                            [x].concat(ys)\n                        ]);\n                    }, permutations(delete1(x, xs)))\n            }, xs)) : [\n            []\n        ]\n    }\n    // GENERIC LIBRARY FUNCTIONS\n    // concatMap :: (a -> [b]) -> [a] -> [b]\n    function concatMap(f, xs) {\n        return [].concat.apply([], xs.map(f));\n    }\n    // delete first instance of a in [a]\n    // delete1 :: a -> [a] -> [a]\n    function delete1(x, xs) {\n        return deleteBy(function(a, b) {\n            return a === b;\n        }, x, xs);\n    }\n    // deleteBy :: (a -> a -> Bool) -> a -> [a] -> [a]\n    function deleteBy(fnEq, x, xs) {\n        return xs.length ? fnEq(x, xs[0]) ? xs.slice(1) : [xs[0]]\n            .concat(deleteBy(fnEq, x, xs.slice(1))) : [];\n    }\n    return permutations(['Aardvarks', 'eat', 'ants'])\n})();","[\n    [\"Aardvarks\", \"eat\", \"ants\"],\n    [\"Aardvarks\", \"ants\", \"eat\"],\n    [\"eat\", \"Aardvarks\", \"ants\"],\n    [\"eat\", \"ants\", \"Aardvarks\"],\n    [\"ants\", \"Aardvarks\", \"eat\"],\n    [\"ants\", \"eat\", \"Aardvarks\"]\n]"],"uncertainCodeArray":[],"textArray":[]}