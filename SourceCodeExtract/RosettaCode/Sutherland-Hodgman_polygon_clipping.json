{"isSuccess":true,"url":"http://rosettacode.org//wiki/Sutherland-Hodgman_polygon_clipping","codeArray":[" <html>\n      <head>\n  \t<script>\n          function clip (subjectPolygon, clipPolygon) {\n              var cp1, cp2, s, e;\n              var inside = function (p) {\n                  return (cp2[0]-cp1[0])*(p[1]-cp1[1]) > (cp2[1]-cp1[1])*(p[0]-cp1[0]);\n              };\n              var intersection = function () {\n                  var dc = [ cp1[0] - cp2[0], cp1[1] - cp2[1] ],\n                      dp = [ s[0] - e[0], s[1] - e[1] ],\n                      n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0],\n                      n2 = s[0] * e[1] - s[1] * e[0], \n                      n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0]);\n                  return [(n1*dp[0] - n2*dc[0]) * n3, (n1*dp[1] - n2*dc[1]) * n3];\n              };\n              var outputList = subjectPolygon;\n              cp1 = clipPolygon[clipPolygon.length-1];\n              for (j in clipPolygon) {\n                  var cp2 = clipPolygon[j];\n                  var inputList = outputList;\n                  outputList = [];\n                  s = inputList[inputList.length - 1]; //last on the input list\n                  for (i in inputList) {\n                      var e = inputList[i];\n                      if (inside(e)) {\n                          if (!inside(s)) {\n                              outputList.push(intersection());\n                          }\n                          outputList.push(e);\n                      }\n                      else if (inside(s)) {\n                          outputList.push(intersection());\n                      }\n                      s = e;\n                  }\n                  cp1 = cp2;\n              }\n              return outputList\n          }\n          function drawPolygon(context, polygon, strokeStyle, fillStyle) {\n              context.strokeStyle = strokeStyle;\n              context.fillStyle = fillStyle;\n              context.beginPath();\n              context.moveTo(polygon[0][0],polygon[0][1]); //first vertex\n              for (var i = 1; i < polygon.length ; i++)\n                  context.lineTo(polygon[i][0],polygon[i][1]);\n              context.lineTo(polygon[0][0],polygon[0][1]); //back to start\n              context.fill();\n              context.stroke();\n              context.closePath();\n          }\n          window.onload = function () {\n  \t        var context = document.getElementById('canvas').getContext('2d');\n  \t        var subjectPolygon = [[50, 150], [200, 50], [350, 150], [350, 300], [250, 300], [200, 250], [150, 350], [100, 250], [100, 200]],\n  \t            clipPolygon = [[100, 100], [300, 100], [300, 300], [100, 300]];\n  \t        var clippedPolygon = clip(subjectPolygon, clipPolygon);\n  \t        drawPolygon(context, clipPolygon, '#888','#88f');\n  \t        drawPolygon(context, subjectPolygon, '#888','#8f8');\n  \t        drawPolygon(context, clippedPolygon, '#000','#0ff');\n      \t}\n          </script>\n      <body>\n      \t<canvas id='canvas' width='400' height='400'></canvas>\n      </body>\n  </html>"],"uncertainCodeArray":[],"textArray":[]}