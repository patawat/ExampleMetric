{"isSuccess":true,"url":"http://rosettacode.org//wiki/Perfect_numbers","codeArray":["function is_perfect(n)\n  {\n   var sum = 1, i, sqrt=Math.floor(Math.sqrt(n));\n   for (i = sqrt-1; i>1; i--)\n   {\n    if (n % i == 0) {\n     sum += i + n/i;\n    }\n   }\n   if(n % sqrt == 0)\n    sum += sqrt + (sqrt*sqrt == n ? 0 : n/sqrt);\n   return sum === n;\n  }\n  var i;\n  for (i = 1; i < 10000; i++)\n  {\n   if (is_perfect(i))\n    print(i);\n  }(function (nFrom, nTo) {\n    function perfect(n) {\n      return n === range(1, n - 1).reduce(\n        function (a, x) {\n          return n % x ? a : a + x;\n        }, 0\n      );\n    }\n    function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n    return range(nFrom, nTo).filter(perfect);\n  })(1, 10000);[6, 28, 496, 8128](function (nFrom, nTo) {\n    function perfect(n) {\n      var lows = range(1, Math.floor(Math.sqrt(n))).filter(function (x) {\n        return (n % x) === 0;\n      });\n      return n > 1 && lows.concat(lows.map(function (x) {\n        return n / x;\n      })).reduce(function (a, x) {\n        return a + x;\n      }, 0) / 2 === n;\n    }\n    function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n    return range(nFrom, nTo).filter(perfect)\n  })(1, 10000);[6, 28, 496, 8128](function (nFrom, nTo) {\n    // MONADIC CHAIN (bind) IN LIEU OF FILTER\n    // ( monadic return for lists is just lambda x -> [x] )\n    return chain(\n      rng(nFrom, nTo),\n      function mPerfect(n) {\n        return (chain(\n          rng(1, Math.floor(Math.sqrt(n))),\n          function (y) {\n            return (n % y) === 0 && n > 1 ? [y, n / y] : [];\n          }\n        ).reduce(function (a, x) {\n          return a + x;\n        }, 0) / 2 === n) ? [n] : [];\n      }\n    );\n    /******************************************************************/\n    // Monadic bind (chain) for lists\n    function chain(xs, f) {\n      return [].concat.apply([], xs.map(f));\n    }\n    function rng(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n  })(1, 10000);[6, 28, 496, 8128]"],"uncertainCodeArray":[],"textArray":[]}