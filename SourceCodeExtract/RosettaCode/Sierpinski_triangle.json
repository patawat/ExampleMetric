{"isSuccess":true,"url":"http://rosettacode.org//wiki/Sierpinski_triangle","codeArray":["// A Sierpinski triangle of order N,\n// constructed as Pascal's triangle mod 2\n// and mapped to 2^N lines of centred {1:asterisk, 0:space} strings\n(function(n) {\n    var nRows = Math.pow(2, n),\n        lstSierpinski = sierpinski(nRows).map(asciiBinary),\n        nBaseWidth = lstSierpinski[nRows - 1].length;\n    return lstSierpinski.map(\n        function(s) {\n            return centreAligned(s, nBaseWidth);\n        }\n    ).join('\\n');\n})(4);\n// A Sierpinski sieve of n rows\n// (Pascal triangle mod 2)\n// n --> [bool]\nfunction sierpinski(n) {\n    return pascalTriangle(n).map(\n        function(line) {\n            return line.map(function(x) {\n                return x % 2;\n            });\n        }\n    )\n}\n// A Pascal triangle of n rows\n// n --> [[n]]\nfunction pascalTriangle(n) {\n    // Sums of each consecutive pair of numbers\n    // [n] --> [n]\n    function pairSums(lst) {\n        return lst.reduce(function(acc, n, i, l) {\n            var iPrev = i ? i - 1 : 0;\n            return i ? acc.concat(l[iPrev] + l[i]) : acc\n        }, []);\n    }\n    // Next line in a Pascal triangle series\n    // [n] --> [n]\n    function nextPascal(lst) {\n        return lst.length ? [1].concat(\n            pairSums(lst)\n        ).concat(1) : [1];\n    }\n    // Each row is a function of the preceding row\n    return n ? Array.apply(null, Array(n - 1)).reduce(\n        function(a, _, i) {\n            return a.concat(\n                [nextPascal(a[i])]\n            );\n        }, [\n            [1]\n        ]\n    ) : [];\n}\n// [bool] --> s\nfunction asciiBinary(lst) {\n    return lst.map(\n        function(x) {\n            return x ? '*' : ' ';\n        }\n    ).join(' ');\n}\n// Space-padded to left and right\n// s --> n --> s\nfunction centreAligned(s, n) {\n    var lngWhite = n - s.length,\n        lngMargin = lngWhite > 0 ? Math.ceil(lngWhite / 2) : 0,\n        strMargin = lngMargin ? Array(lngMargin + 1).join(' ') : '';\n    return strMargin ? strMargin + s + strMargin : s;\n}","function triangle(o) {\n    var n = 1 << o,\n        line = new Array(2 * n),\n        i, j, t, u;\n    for (i = 0; i < line.length; ++i) line[i] = '&nbsp;';\n    line[n] = '*';\n    for (i = 0; i < n; ++i) {\n        document.write(line.join('') + \"\\n\");\n        u = '*';\n        for (j = n - i; j < n + i + 1; ++j) {\n            t = (line[j - 1] == line[j + 1] ? '&nbsp;' : '*');\n            line[j - 1] = u;\n            u = t;\n        }\n        line[n + i] = t;\n        line[n + i + 1] = '*';\n    }\n}\ndocument.write(\"<pre>\\n\");\ntriangle(6);\ndocument.write(\"</pre>\");"],"uncertainCodeArray":[],"textArray":[]}