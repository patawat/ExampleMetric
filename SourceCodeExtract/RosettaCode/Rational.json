{"isSuccess":true,"url":"http://rosettacode.org//wiki/Arithmetic/Rational","codeArray":["// the constructor\nfunction Rational(numerator, denominator) {\n    if (denominator === undefined)\n        denominator = 1;\n    else if (denominator == 0)\n        throw \"divide by zero\";\n    this.numer = numerator;\n    if (this.numer == 0)\n        this.denom = 1;\n    else\n        this.denom = denominator;\n    this.normalize();\n}\n// getter methods\nRational.prototype.numerator = function() {\n    return this.numer\n};\nRational.prototype.denominator = function() {\n    return this.denom\n};\n// clone a rational\nRational.prototype.dup = function() {\n    return new Rational(this.numerator(), this.denominator());\n};\n// conversion methods\nRational.prototype.toString = function() {\n    if (this.denominator() == 1) {\n        return this.numerator().toString();\n    } else {\n        // implicit conversion of numbers to strings\n        return this.numerator() + '/' + this.denominator()\n    }\n};\nRational.prototype.toFloat = function() {\n    return eval(this.toString())\n}\nRational.prototype.toInt = function() {\n    return Math.floor(this.toFloat())\n};\n// reduce \nRational.prototype.normalize = function() {\n        // greatest common divisor\n        var a = Math.abs(this.numerator()),\n            b = Math.abs(this.denominator())\n        while (b != 0) {\n            var tmp = a;\n            a = b;\n            b = tmp % b;\n        }\n        // a is the gcd\n        this.numer /= a;\n        this.denom /= a;\n        if (this.denom < 0) {\n            this.numer *= -1;\n            this.denom *= -1;\n        }\n        return this;\n    }\n    // absolute value\n    // returns a new rational\nRational.prototype.abs = function() {\n    return new Rational(Math.abs(this.numerator()), this.denominator());\n};\n// inverse\n// returns a new rational\nRational.prototype.inv = function() {\n    return new Rational(this.denominator(), this.numerator());\n};\n//\n// arithmetic methods\n// variadic, modifies receiver\nRational.prototype.add = function() {\n    for (var i = 0; i < arguments.length; i++) {\n        this.numer = this.numer * arguments[i].denominator() + this.denom * arguments[i].numerator();\n        this.denom = this.denom * arguments[i].denominator();\n    }\n    return this.normalize();\n};\n// variadic, modifies receiver\nRational.prototype.subtract = function() {\n    for (var i = 0; i < arguments.length; i++) {\n        this.numer = this.numer * arguments[i].denominator() - this.denom * arguments[i].numerator();\n        this.denom = this.denom * arguments[i].denominator();\n    }\n    return this.normalize();\n};\n// unary \"-\" operator\n// returns a new rational\nRational.prototype.neg = function() {\n    return (new Rational(0)).subtract(this);\n};\n// variadic, modifies receiver\nRational.prototype.multiply = function() {\n    for (var i = 0; i < arguments.length; i++) {\n        this.numer *= arguments[i].numerator();\n        this.denom *= arguments[i].denominator();\n    }\n    return this.normalize();\n};\n// modifies receiver\nRational.prototype.divide = function(rat) {\n        return this.multiply(rat.inv());\n    }\n    // increment\n    // modifies receiver\nRational.prototype.inc = function() {\n        this.numer += this.denominator();\n        return this.normalize();\n    }\n    // decrement\n    // modifies receiver\nRational.prototype.dec = function() {\n        this.numer -= this.denominator();\n        return this.normalize();\n    }\n    //\n    // comparison methods\nRational.prototype.isZero = function() {\n    return (this.numerator() == 0);\n}\nRational.prototype.isPositive = function() {\n    return (this.numerator() > 0);\n}\nRational.prototype.isNegative = function() {\n    return (this.numerator() < 0);\n}\nRational.prototype.eq = function(rat) {\n    return this.dup().subtract(rat).isZero();\n}\nRational.prototype.ne = function(rat) {\n    return !(this.eq(rat));\n}\nRational.prototype.lt = function(rat) {\n    return this.dup().subtract(rat).isNegative();\n}\nRational.prototype.gt = function(rat) {\n    return this.dup().subtract(rat).isPositive();\n}\nRational.prototype.le = function(rat) {\n    return !(this.gt(rat));\n}\nRational.prototype.ge = function(rat) {\n    return !(this.lt(rat));\n}","function assert(cond, msg) {\n    if (!cond) throw msg;\n}\nprint('testing')\nvar a, b, c, d, e, f;\n//test creation\na = new Rational(0);\nassert(a.toString() == \"0\", \"Rational(0).toString() == '0'\")\na = new Rational(2);\nassert(a.toString() == \"2\", \"Rational(2).toString() == '2'\")\na = new Rational(1, 2);\nassert(a.toString() == \"1/2\", \"Rational(1,2).toString() == '1/2'\")\nb = new Rational(2, -12);\nassert(b.toString() == \"-1/6\", \"Rational(1,6).toString() == '1/6'\")\nf = new Rational(0, 9)\na = new Rational(1, 3)\nb = new Rational(1, 2)\nc = new Rational(1, 3)\nassert(!(a.eq(b)), \"1/3 == 1/2\")\nassert(a.eq(c), \"1/3 == 1/3\")\nassert(a.ne(b), \"1/3 != 1/2\")\nassert(!(a.ne(c)), \"1/3 != 1/3\")\nassert(a.lt(b), \"1/3 < 1/2\")\nassert(!(b.lt(a)), \"1/2 < 1/3\")\nassert(!(a.lt(c)), \"1/3 < 1/3\")\nassert(!(a.gt(b)), \"1/3 > 1/2\")\nassert(b.gt(a), \"1/2 > 1/3\")\nassert(!(a.gt(c)), \"1/3 > 1/3\")\nassert(a.le(b), \"1/3 <= 1/2\")\nassert(!(b.le(a)), \"1/2 <= 1/3\")\nassert(a.le(c), \"1/3 <= 1/3\")\nassert(!(a.ge(b)), \"1/3 >= 1/2\")\nassert(b.ge(a), \"1/2 >= 1/3\")\nassert(a.ge(c), \"1/3 >= 1/3\")\na = new Rational(1, 2)\nb = new Rational(1, 6)\na.add(b);\nassert(a.eq(new Rational(2, 3)), \"1/2 + 1/6 == 2/3\")\nc = a.neg();\nassert(a.eq(new Rational(2, 3)), \"neg(1/2) == -1/2\")\nassert(c.eq(new Rational(2, -3)), \"neg(1/2) == -1/2\")\nd = c.abs();\nassert(c.eq(new Rational(-2, 3)), \"abs(neg(1/2)) == 1/2\")\nassert(d.eq(new Rational(2, 3)), \"abs(neg(1/2)) == 1/2\")\nb.subtract(a);\nassert(b.eq(new Rational(-1, 2)), \"1/6 - 1/2 == -1/3\")\nc = a.neg().abs();\nassert(c.eq(a), \"abs(neg(1/2)) == 1/2\")\nc = (new Rational(-1, 3)).inv();\nassert(c.toString() == '-3', \"inv(1/6 - 1/2) == -3\")\ntry {\n    e = f.inv();\n    throw \"should have been an error: \" + f + '.inv() = ' + e\n} catch (e) {\n    assert(e == \"divide by zero\", \"0.inv() === error\")\n}\nb = new Rational(1, 6)\nb.add(new Rational(2, 3), new Rational(4, 2));\nassert(b.toString() == \"17/6\", \"1/6+2/3+4/2 == 17/6\");\na = new Rational(1, 3);\nb = new Rational(1, 6)\nc = new Rational(5, 6);\nd = new Rational(1 / 5);\ne = new Rational(2);\nf = new Rational(0, 9);\nassert(c.dup().multiply(d).eq(b), \"5/6 * 1/5 = 1/6\")\nassert(c.dup().multiply(d, e).eq(a), \"5/6 * 1/5 *2 = 1/3\")\nassert(c.dup().multiply(d, e, f).eq(f), \"5/6 * 1/5 *2*0 = 0\")\nc.divide(new Rational(5));\nassert(c.eq(b), \"5/6 / 5 = 1/6b\")\ntry {\n    e = c.divide(f)\n    throw \"should have been an error: \" + c + \"/\" + f + '= ' + e\n} catch (e) {\n    assert(e == \"divide by zero\", \"0.inv() === error\")\n}\nprint('all tests passed');","function factors(num) {\n    var factors = new Array();\n    var sqrt = Math.floor(Math.sqrt(num));\n    for (var i = 1; i <= sqrt; i++) {\n        if (num % i == 0) {\n            factors.push(i);\n            if (num / i != i)\n                factors.push(num / i);\n        }\n    }\n    factors.sort(function(a, b) {\n        return a - b\n    }); // numeric sort\n    return factors;\n}\n\nfunction isPerfect(n) {\n    var sum = new Rational(0);\n    var fctrs = factors(n);\n    for (var i = 0; i < fctrs.length; i++)\n        sum.add(new Rational(1, fctrs[i]));\n    // note, fctrs includes 1, so sum should be 2\n    return sum.toFloat() == 2.0;\n}\n// find perfect numbers less than 2^19\nfor (var n = 2; n < Math.pow(2, 19); n++)\n    if (isPerfect(n))\n        print(\"perfect: \" + n);\n    // test 5th perfect number\nvar n = Math.pow(2, 12) * (Math.pow(2, 13) - 1);\nif (isPerfect(n))\n    print(\"perfect: \" + n);"],"uncertainCodeArray":[],"textArray":[]}