{"isSuccess":true,"url":"http://rosettacode.org//wiki/Arithmetic/Rational","codeArray":["// the constructor\n  function Rational(numerator, denominator) {\n      if (denominator === undefined)\n          denominator = 1;\n      else if (denominator == 0)\n          throw \"divide by zero\";\n      this.numer = numerator;\n      if (this.numer == 0)\n          this.denom = 1;\n      else\n          this.denom = denominator;\n      this.normalize();\n  }\n  // getter methods\n  Rational.prototype.numerator   = function() {return this.numer};\n  Rational.prototype.denominator = function() {return this.denom};\n  // clone a rational\n  Rational.prototype.dup = function() {\n      return new Rational(this.numerator(), this.denominator()); \n  };\n  // conversion methods\n  Rational.prototype.toString = function() {\n      if (this.denominator() == 1) {\n          return this.numerator().toString();\n      } else {\n          // implicit conversion of numbers to strings\n          return this.numerator() + '/' + this.denominator()\n      }\n  };\n  Rational.prototype.toFloat  = function() {return eval(this.toString())}\n  Rational.prototype.toInt    = function() {return Math.floor(this.toFloat())};\n  // reduce \n  Rational.prototype.normalize = function() {\n      // greatest common divisor\n      var a=Math.abs(this.numerator()), b=Math.abs(this.denominator())\n      while (b != 0) {\n          var tmp = a;\n          a = b;\n          b = tmp % b;\n      }\n      // a is the gcd\n      this.numer /= a;\n      this.denom /= a;\n      if (this.denom < 0) {\n          this.numer *= -1;\n          this.denom *= -1;\n      }\n      return this;\n  }\n  // absolute value\n  // returns a new rational\n  Rational.prototype.abs = function() {\n      return new Rational(Math.abs(this.numerator()), this.denominator());\n  };\n  // inverse\n  // returns a new rational\n  Rational.prototype.inv = function() {\n      return new Rational(this.denominator(), this.numerator());\n  };\n  //\n  // arithmetic methods\n  // variadic, modifies receiver\n  Rational.prototype.add = function() {\n      for (var i = 0; i < arguments.length; i++) {\n          this.numer = this.numer * arguments[i].denominator() + this.denom * arguments[i].numerator();\n          this.denom = this.denom * arguments[i].denominator();\n      }\n      return this.normalize();\n  };\n  // variadic, modifies receiver\n  Rational.prototype.subtract = function() {\n      for (var i = 0; i < arguments.length; i++) {\n          this.numer = this.numer * arguments[i].denominator() - this.denom * arguments[i].numerator();\n          this.denom = this.denom * arguments[i].denominator();\n      }\n      return this.normalize();\n  };\n  // unary \"-\" operator\n  // returns a new rational\n  Rational.prototype.neg = function() {\n      return (new Rational(0)).subtract(this);\n  };\n  // variadic, modifies receiver\n  Rational.prototype.multiply = function() {\n      for (var i = 0; i < arguments.length; i++) {\n          this.numer *= arguments[i].numerator();\n          this.denom *= arguments[i].denominator();\n      }\n      return this.normalize();\n  };\n  // modifies receiver\n  Rational.prototype.divide = function(rat) {\n      return this.multiply(rat.inv());\n  }\n  // increment\n  // modifies receiver\n  Rational.prototype.inc = function() {\n      this.numer += this.denominator();\n      return this.normalize();\n  }\n  // decrement\n  // modifies receiver\n  Rational.prototype.dec = function() {\n      this.numer -= this.denominator();\n      return this.normalize();\n  }\n  //\n  // comparison methods\n  Rational.prototype.isZero = function() {\n      return (this.numerator() == 0);\n  }\n  Rational.prototype.isPositive = function() {\n      return (this.numerator() > 0);\n  }\n  Rational.prototype.isNegative = function() {\n      return (this.numerator() < 0);\n  }\n  Rational.prototype.eq = function(rat) {\n      return this.dup().subtract(rat).isZero();\n  }\n  Rational.prototype.ne = function(rat) {\n      return !(this.eq(rat));\n  }\n  Rational.prototype.lt = function(rat) {\n      return this.dup().subtract(rat).isNegative();\n  }\n  Rational.prototype.gt = function(rat) {\n      return this.dup().subtract(rat).isPositive();\n  }\n  Rational.prototype.le = function(rat) {\n      return !(this.gt(rat));\n  }\n  Rational.prototype.ge = function(rat) {\n      return !(this.lt(rat));\n  }function assert(cond, msg) { if (!cond) throw msg; }\n  print('testing')\n  var a, b, c, d, e, f;\n  //test creation\n  a = new Rational(0); assert(a.toString() == \"0\", \"Rational(0).toString() == '0'\")\n  a = new Rational(2); assert(a.toString() == \"2\", \"Rational(2).toString() == '2'\")\n  a = new Rational(1,2); assert(a.toString() == \"1/2\", \"Rational(1,2).toString() == '1/2'\")\n  b = new Rational(2,-12); assert(b.toString() == \"-1/6\", \"Rational(1,6).toString() == '1/6'\")\n  f = new Rational(0,9)\n  a = new Rational(1,3)\n  b = new Rational(1,2)\n  c = new Rational(1,3)\n  assert(!(a.eq(b)), \"1/3 == 1/2\")\n  assert(a.eq(c), \"1/3 == 1/3\")\n  assert(a.ne(b), \"1/3 != 1/2\")\n  assert(!(a.ne(c)), \"1/3 != 1/3\")\n  assert(a.lt(b), \"1/3 < 1/2\")\n  assert(!(b.lt(a)), \"1/2 < 1/3\")\n  assert(!(a.lt(c)), \"1/3 < 1/3\")\n  assert(!(a.gt(b)), \"1/3 > 1/2\")\n  assert(b.gt(a), \"1/2 > 1/3\")\n  assert(!(a.gt(c)), \"1/3 > 1/3\")\n  assert(a.le(b), \"1/3 <= 1/2\")\n  assert(!(b.le(a)), \"1/2 <= 1/3\")\n  assert(a.le(c), \"1/3 <= 1/3\")\n  assert(!(a.ge(b)), \"1/3 >= 1/2\")\n  assert(b.ge(a), \"1/2 >= 1/3\")\n  assert(a.ge(c), \"1/3 >= 1/3\")\n  a = new Rational(1,2)\n  b = new Rational(1,6)\n  a.add(b); assert(a.eq(new Rational(2,3)), \"1/2 + 1/6 == 2/3\")\n  c = a.neg(); assert(a.eq(new Rational(2,3)), \"neg(1/2) == -1/2\")\n               assert(c.eq(new Rational(2,-3)), \"neg(1/2) == -1/2\")\n  d = c.abs(); assert(c.eq(new Rational(-2,3)), \"abs(neg(1/2)) == 1/2\")\n               assert(d.eq(new Rational(2,3)), \"abs(neg(1/2)) == 1/2\")\n  b.subtract(a); assert(b.eq(new Rational(-1,2)), \"1/6 - 1/2 == -1/3\")\n  c = a.neg().abs(); assert(c.eq(a), \"abs(neg(1/2)) == 1/2\")\n  c = (new Rational(-1,3)).inv(); assert(c.toString() == '-3', \"inv(1/6 - 1/2) == -3\")\n  try {\n      e = f.inv();\n      throw \"should have been an error: \" +f + '.inv() = ' + e\n  } catch (e) {\n      assert(e == \"divide by zero\", \"0.inv() === error\")\n  }\n  b = new Rational(1,6)\n  b.add(new Rational(2,3), new Rational(4,2)); assert(b.toString() == \"17/6\", \"1/6+2/3+4/2 == 17/6\");\n  a = new Rational(1,3);\n  b = new Rational(1,6)\n  c = new Rational(5,6);\n  d = new Rational(1/5);\n  e = new Rational(2);\n  f = new Rational(0,9);\n  assert(c.dup().multiply(d).eq(b), \"5/6 * 1/5 = 1/6\")\n  assert(c.dup().multiply(d,e).eq(a), \"5/6 * 1/5 *2 = 1/3\")\n  assert(c.dup().multiply(d,e,f).eq(f), \"5/6 * 1/5 *2*0 = 0\")\n  c.divide(new Rational(5));\n  assert(c.eq(b), \"5/6 / 5 = 1/6b\")\n  try {\n      e = c.divide(f)\n      throw \"should have been an error: \" + c + \"/\" + f + '= ' + e\n  } catch (e) {\n      assert(e == \"divide by zero\", \"0.inv() === error\")\n  }\n  print('all tests passed');function factors(num) {\n      var factors = new Array();\n      var sqrt = Math.floor(Math.sqrt(num)); \n      for (var i = 1; i <= sqrt; i++) {\n          if (num % i == 0) {\n              factors.push(i);\n              if (num / i != i) \n                  factors.push(num / i);\n          }\n      }\n      factors.sort(function(a,b){return a-b});  // numeric sort\n      return factors;\n  }\n  function isPerfect(n) {\n      var sum = new Rational(0);\n      var fctrs = factors(n);\n      for (var i = 0; i < fctrs.length; i++) \n          sum.add(new Rational(1, fctrs[i]));\n      // note, fctrs includes 1, so sum should be 2\n      return sum.toFloat() == 2.0;\n  }\n  // find perfect numbers less than 2^19\n  for (var n = 2; n < Math.pow(2,19); n++)\n      if (isPerfect(n))\n          print(\"perfect: \" + n);\n  // test 5th perfect number\n  var n = Math.pow(2,12) * (Math.pow(2,13) - 1);\n  if (isPerfect(n))\n      print(\"perfect: \" + n);"],"uncertainCodeArray":[],"textArray":[]}