{"isSuccess":true,"url":"http://rosettacode.org//wiki/Vector_products","codeArray":["function dotProduct() {\n    var len = arguments[0] && arguments[0].length;\n    var argsLen = arguments.length;\n    var i, j = len;\n    var prod, sum = 0;\n    // If no arguments supplied, return undefined\n    if (!len) {\n      return;\n    }\n    // If all vectors not same length, return undefined\n    i = argsLen;\n    while (i--) {\n      if (arguments[i].length != len) {\n        return;  // return undefined\n      }\n    }\n    // Sum terms\n    while (j--) {\n      i = argsLen;\n      prod = 1;\n      while (i--) {\n        prod *= arguments[i][j];\n      }\n      sum += prod;\n    }\n    return sum;\n  }\n  function crossProduct(a, b) {\n    // Check lengths\n    if (a.length != 3 || b.length != 3) {\n       return;\n    }\n    return [a[1]*b[2] - a[2]*b[1],\n            a[2]*b[0] - a[0]*b[2],\n            a[0]*b[1] - a[1]*b[0]];\n  }\n  function scalarTripleProduct(a, b, c) {\n    return dotProduct(a, crossProduct(b, c));\n  }\n  function vectorTripleProduct(a, b, c) {\n    return crossProduct(a, crossProduct(b, c));\n  }\n  // Run tests\n  (function () {\n    var a = [3, 4, 5];\n    var b = [4, 3, 5];\n    var c = [-5, -12, -13];\n    alert(\n      'A . B: ' + dotProduct(a, b) +\n      '\\n' +\n      'A x B: ' + crossProduct(a, b) +\n      '\\n' +\n      'A . (B x C): ' + scalarTripleProduct(a, b, c) +\n      '\\n' +\n      'A x (B x C): ' + vectorTripleProduct(a, b, c)\n    ); \n  }());"],"uncertainCodeArray":[],"textArray":[]}