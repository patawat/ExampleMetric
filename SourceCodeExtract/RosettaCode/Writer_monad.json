{"isSuccess":true,"url":"http://rosettacode.org//wiki/Monads/Writer_monad","codeArray":["(function () {\n      'use strict';\n      // START WITH THREE SIMPLE FUNCTIONS\n      // Square root of a number more than 0\n      function root(x) {\n          return Math.sqrt(x);\n      }\n      // Add 1\n      function addOne(x) {\n          return x + 1;\n      }\n      // Divide by 2\n      function half(x) {\n          return x / 2;\n      }\n      // DERIVE LOGGING VERSIONS OF EACH FUNCTION\n      function loggingVersion(f, strLog) {\n          return function (v) {\n              return {\n                  value: f(v),\n                  log: strLog\n              };\n          }\n      }\n      var log_root = loggingVersion(root, \"obtained square root\"),\n          log_addOne = loggingVersion(addOne, \"added 1\"),\n          log_half = loggingVersion(half, \"divided by 2\");\n      // UNIT/RETURN and BIND for the the WRITER MONAD\n      // The Unit / Return function for the Writer monad:\n      // 'Lifts' a raw value into the wrapped form\n      // a -> Writer a\n      function writerUnit(a) {\n          return {\n              value: a,\n              log: \"Initial value: \" + JSON.stringify(a)\n          };\n      }\n      // The Bind function for the Writer monad:\n      // applies a logging version of a function\n      // to the contents of a wrapped value\n      // and return a wrapped result (with extended log)\n      // Writer a -> (a -> Writer b) -> Writer b\n      function writerBind(w, f) {\n          var writerB = f(w.value),\n              v = writerB.value;\n          return {\n              value: v,\n              log: w.log + '\\n' + writerB.log + ' -> ' + JSON.stringify(v)\n          };\n      }\n      // USING UNIT AND BIND TO COMPOSE LOGGING FUNCTIONS\n      // We can compose a chain of Writer functions (of any length) with a simple foldr/reduceRight\n      // which starts by 'lifting' the initial value into a Writer wrapping,\n      // and then nests function applications (working from right to left)\n      function logCompose(lstFunctions, value) {\n          return lstFunctions.reduceRight(\n              writerBind,\n              writerUnit(value)\n          );\n      }\n      var half_of_addOne_of_root = function (v) {\n          return logCompose(\n              [log_half, log_addOne, log_root], v\n          );\n      };\n      return half_of_addOne_of_root(5);\n  })();"],"uncertainCodeArray":[],"textArray":[]}