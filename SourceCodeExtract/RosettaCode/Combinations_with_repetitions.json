{"isSuccess":true,"url":"http://rosettacode.org//wiki/Combinations_with_repetitions","codeArray":["function disp(x) {\n    var e = document.createTextNode(x + '\\n');\n    document.getElementById('x').appendChild(e);\n}\n\nfunction pick(n, got, pos, from, show) {\n    var cnt = 0;\n    if (got.length == n) {\n        if (show) disp(got.join(' '));\n        return 1;\n    }\n    for (var i = pos; i < from.length; i++) {\n        got.push(from[i]);\n        cnt += pick(n, got, i, from, show);\n        got.pop();\n    }\n    return cnt;\n}\ndisp(pick(2, [], 0, [\"iced\", \"jam\", \"plain\"], true) + \" combos\");\ndisp(\"pick 3 out of 10: \" + pick(3, [], 0, \"a123456789\".split(''), false) + \" combos\");","(function() {\n    // n -> [a] -> [[a]]\n    function combsWithRep(n, lst) {\n        return n ? (\n            lst.length ? combsWithRep(n - 1, lst).map(function(t) {\n                return [lst[0]].concat(t);\n            }).concat(combsWithRep(n, lst.slice(1))) : []\n        ) : [\n            []\n        ];\n    };\n    // If needed, we can derive a significantly faster version of\n    // the simple recursive function above by memoizing it\n    // f -> f\n    function memoized(fn) {\n        m = {};\n        return function(x) {\n            var args = [].slice.call(arguments),\n                strKey = args.join('-');\n            v = m[strKey];\n            if ('u' === (typeof v)[0])\n                m[strKey] = v = fn.apply(null, args);\n            return v;\n        }\n    }\n    // [m..n]\n    function range(m, n) {\n        return Array.apply(null, Array(n - m + 1)).map(function(x, i) {\n            return m + i;\n        });\n    }\n    return [\n        combsWithRep(2, [\"iced\", \"jam\", \"plain\"]),\n        // obtaining and applying a memoized version of the function\n        memoized(combsWithRep)(3, range(1, 10)).length\n    ];\n})();","[\n    [\n        [\"iced\", \"iced\"],\n        [\"iced\", \"jam\"],\n        [\"iced\", \"plain\"],\n        [\"jam\", \"jam\"],\n        [\"jam\", \"plain\"],\n        [\"plain\", \"plain\"]\n    ],\n    220\n]"],"uncertainCodeArray":[],"textArray":[]}