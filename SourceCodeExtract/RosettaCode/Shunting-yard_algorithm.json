{"isSuccess":true,"url":"http://rosettacode.org//wiki/Parsing/Shunting-yard_algorithm","codeArray":["function Stack() {\n    this.dataStore = [];\n    this.top = 0;\n    this.push = push;\n    this.pop = pop;\n    this.peek = peek;\n    this.length = length;\n}\n\nfunction push(element) {\n    this.dataStore[this.top++] = element;\n}\n\nfunction pop() {\n    return this.dataStore[--this.top];\n}\n\nfunction peek() {\n    return this.dataStore[this.top - 1];\n}\n\nfunction length() {\n    return this.top;\n}\nvar infix = \"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\";\ninfix = infix.replace(/\\s+/g, ''); // remove spaces, so infix[i]!=\" \"\nvar s = new Stack();\nvar ops = \"-+/*^\";\nvar precedence = {\n    \"^\": 4,\n    \"*\": 3,\n    \"/\": 3,\n    \"+\": 2,\n    \"-\": 2\n};\nvar associativity = {\n    \"^\": \"Right\",\n    \"*\": \"Left\",\n    \"/\": \"Left\",\n    \"+\": \"Left\",\n    \"-\": \"Left\"\n};\nvar token;\nvar postfix = \"\";\nvar o1, o2;\nfor (var i = 0; i < infix.length; i++) {\n    token = infix[i];\n    if (token >= \"0\" && token <= \"9\") { // if token is operand (here limited to 0 <= x <= 9)\n        postfix += token + \" \";\n    } else if (ops.indexOf(token) != -1) { // if token is an operator\n        o1 = token;\n        o2 = s.peek();\n        while (ops.indexOf(o2) != -1 && ( // while operator token, o2, on top of the stack\n                // and o1 is left-associative and its precedence is less than or equal to that of o2\n                (associativity[o1] == \"Left\" && (precedence[o1] <= precedence[o2])) ||\n                // the algorithm on wikipedia says: or o1 precedence < o2 precedence, but I think it should be\n                // or o1 is right-associative and its precedence is less than that of o2\n                (associativity[o1] == \"Right\" && (precedence[o1] < precedence[o2]))\n            )) {\n            postfix += o2 + \" \"; // add o2 to output queue\n            s.pop(); // pop o2 of the stack\n            o2 = s.peek(); // next round\n        }\n        s.push(o1); // push o1 onto the stack\n    } else if (token == \"(\") { // if token is left parenthesis\n        s.push(token); // then push it onto the stack\n    } else if (token == \")\") { // if token is right parenthesis \n        while (s.peek() != \"(\") { // until token at top is (\n            postfix += s.pop() + \" \";\n        }\n        s.pop(); // pop (, but not onto the output queue\n    }\n}\nwhile (s.length() > 0) {\n    postfix += s.pop() + \" \";\n}\nprint(postfix);"],"uncertainCodeArray":[],"textArray":[]}