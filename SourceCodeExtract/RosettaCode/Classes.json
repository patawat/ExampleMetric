{"isSuccess":true,"url":"http://rosettacode.org//wiki/Classes","codeArray":["//Constructor function.\n  function Car(brand, weight) {\n    this.brand = brand;\n    this.weight = weight || 1000; // Resort to default value (with 'or' notation).\n  }\n  Car.prototype.getPrice = function() { // Method of Car.\n    return this.price;\n  }\n  function Truck(brand, size) {\n    this.car = Car;\n    this.car(brand, 2000); // Call another function, modifying the \"this\" object (e.g. \"superconstructor\".)\n    this.size = size; // Custom property for just this object.\n  }\n  Truck.prototype = Car.prototype; // Also \"import\" the prototype from Car.\n  var cars = [ // Some example car objects.\n    new Car(\"Mazda\"),\n    new Truck(\"Volvo\", 2)\n  ];\n  for (var i=0; i<cars.length; i++) {\n    alert(cars[i].brand + \" \" + cars[i].weight + \" \" + cars[i].size + \", \" +\n        (cars[i] instanceof Car) + \" \" + (cars[i] instanceof Truck));\n  }class Car {\n    /**\n     * A few brands of cars\n     * @type {string[]}\n     */\n    static brands = ['Mazda', 'Volvo'];\n    /**\n     * Weight of car\n     * @type {number}\n     */\n    weight = 1000;\n    /**\n     * Brand of car\n     * @type {string}\n     */\n    brand;\n    /**\n     * Price of car\n     * @type {number}\n     */\n    price;\n    /**\n     * @param {string} brand - car brand\n     * @param {number} weight - mass of car\n     */\n    constructor(brand, weight) {\n      if (brand) this.brand = brand;\n      if (weight) this.weight = weight\n    }\n    /**\n     * Drive\n     * @param distance - distance to drive\n     */\n    drive(distance = 10) {\n      console.log(`A ${this.brand} ${this.constructor.name} drove ${distance}cm`);\n    }\n    /**\n     * Formatted stats string\n     */\n    get formattedStats() {\n      let out =\n        `Type: ${this.constructor.name.toLowerCase()}`\n        + `\\nBrand: ${this.brand}`\n        + `\\nWeight: ${this.weight}`;\n      if (this.size) out += `\\nSize: ${this.size}`;\n      return out\n    }\n  }\n  class Truck extends Car {\n    /**\n     * Size of truck\n     * @type {number}\n     */\n    size;\n    /**\n     * @param {string} brand - car brand\n     * @param {number} size - size of car\n     */\n    constructor(brand, size) {\n      super(brand, 2000);\n      if (size) this.size = size;\n    }\n  }\n  let myTruck = new Truck('Volvo', 2);\n  console.log(myTruck.formattedStats);\n  myTruck.drive(40);class Car \n  {\n    //Constructor function.\n    function this(brand, weight, price = 0) {\n      this.brand = brand;\n      this.weight = weight || 1000; // Resort to default value (with 'or' notation).\n      this._price = price;\n    }\n    property price(v) // computable property, special kind of member function\n    {\n      get { return this._price; } // getter section \n      set { this._price = v; }    // setter section\n    }\n    function toString() { // member function, method of a Car.\n      return String.printf(\"<%s>\",this.brand);\n    }\n  }\n  class Truck : Car \n  {\n    function this(brand, size) {\n      super(brand, 2000); // Call of constructor of super class (Car here)\n      this.size = size; // Custom property for just this object.\n    }\n  }\n  var cars = [ // Some example car objects.\n    new Car(\"Mazda\"),\n    new Truck(\"Volvo\", 2, 30000)\n  ];\n  for (var (i,car) in cars) // TIScript allows enumerate indexes and values\n  {\n    stdout.printf(\"#%d %s $%d %v %v, %v %v\", i, car.brand, car.price, car.weight, car.size,\n                   car instanceof Car, car instanceof Truck);\n  }"],"uncertainCodeArray":[],"textArray":[]}