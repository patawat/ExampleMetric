{"isSuccess":true,"url":"http://rosettacode.org/wiki/Conway%27s_Game_of_Life","codeArray":["function GameOfLife() {\n    this.init = function(turns, width, height) {\n        this.board = new Array(height);\n        for (var x = 0; x < height; x++) {\n            this.board[x] = new Array(width);\n            for (var y = 0; y < width; y++) {\n                this.board[x][y] = Math.round(Math.random());\n            }\n        }\n        this.turns = turns;\n    }\n    this.nextGen = function() {\n        this.boardNext = new Array(this.board.length);\n        for (var i = 0; i < this.board.length; i++) {\n            this.boardNext[i] = new Array(this.board[i].length);\n        }\n        for (var x = 0; x < this.board.length; x++) {\n            for (var y = 0; y < this.board[x].length; y++) {\n                var n = 0;\n                for (var dx = -1; dx <= 1; dx++) {\n                    for (var dy = -1; dy <= 1; dy++) {\n                        if (dx == 0 && dy == 0) {} else if (typeof this.board[x + dx] !== 'undefined' &&\n                            typeof this.board[x + dx][y + dy] !== 'undefined' &&\n                            this.board[x + dx][y + dy]) {\n                            n++;\n                        }\n                    }\n                }\n                var c = this.board[x][y];\n                switch (n) {\n                    case 0:\n                    case 1:\n                        c = 0;\n                        break;\n                    case 2:\n                        break;\n                    case 3:\n                        c = 1;\n                        break;\n                    default:\n                        c = 0;\n                }\n                this.boardNext[x][y] = c;\n            }\n        }\n        this.board = this.boardNext.slice();\n    }\n    this.print = function() {\n        for (var x = 0; x < this.board.length; x++) {\n            var l = \"\";\n            for (var y = 0; y < this.board[x].length; y++) {\n                if (this.board[x][y])\n                    l += \"X\";\n                else\n                    l += \" \";\n            }\n            print(l);\n        }\n    }\n    this.start = function() {\n        for (var t = 0; t < this.turns; t++) {\n            print(\"---\\nTurn \" + (t + 1));\n            this.print();\n            this.nextGen()\n        }\n    }\n}\nvar game = new GameOfLife();\nprint(\"---\\n3x3 Blinker over three turns.\");\ngame.init(3);\ngame.board = [\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n];\ngame.start();\nprint(\"---\\n10x6 Glider over five turns.\");\ngame.init(5);\ngame.board = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\ngame.start();\nprint(\"---\\nRandom 5x10\");\ngame.init(5, 5, 10);\ngame.start();"," function GameOfLife() {\n     this.init = function(turns, width, height) {\n         this.board = new Array(height);\n         for (var x = 0; x < height; x++) {\n             this.board[x] = new Array(width);\n             for (var y = 0; y < width; y++) {\n                 this.board[x][y] = Math.round(Math.random());\n             }\n         }\n         this.turns = turns;\n     }\n     this.nextGen = function() {\n         this.boardNext = new Array(this.board.length);\n         for (var i = 0; i < this.board.length; i++) {\n             this.boardNext[i] = new Array(this.board[i].length);\n         }\n         for (var x = 0; x < this.board.length; x++) {\n             for (var y = 0; y < this.board[x].length; y++) {\n                 var n = 0;\n                 for (var dx = -1; dx <= 1; dx++) {\n                     for (var dy = -1; dy <= 1; dy++) {\n                         if (dx == 0 && dy == 0) {} else if (typeof this.board[x + dx] !== 'undefined' &&\n                             typeof this.board[x + dx][y + dy] !== 'undefined' &&\n                             this.board[x + dx][y + dy]) {\n                             n++;\n                         }\n                     }\n                 }\n                 var c = this.board[x][y];\n                 switch (n) {\n                     case 0:\n                     case 1:\n                         c = 0;\n                         break;\n                     case 2:\n                         break;\n                     case 3:\n                         c = 1;\n                         break;\n                     default:\n                         c = 0;\n                 }\n                 this.boardNext[x][y] = c;\n             }\n         }\n         this.board = this.boardNext.slice();\n     }\n     this.print = function(ctx, w, h) {\n         if (!w)\n             w = 8;\n         if (!h)\n             h = 8;\n         for (var x = 0; x < this.board.length; x++) {\n             var l = \"\";\n             for (var y = 0; y < this.board[x].length; y++) {\n                 if (this.board[x][y])\n                 // x and y reversed to draw matrix like it looks in source\n                 // rather than the \"actual\" positions\n                     ctx.fillStyle = \"orange\";\n                 else\n                     ctx.fillStyle = \"black\";\n                 ctx.fillRect(y * h, x * w, h, w);\n             }\n         }\n     }\n     this.start = function(ctx, w, h) {\n         for (var t = 0; t < this.turns; t++) {\n             this.print(ctx, w, h);\n             this.nextGen()\n         }\n     }\n }\n\n function init() {\n     // Change document title and text under canvas\n     document.title = \"Conway's Game of Life\";\n     // Setup game boards for Conway's Game of Life\n     var blinker = new GameOfLife();\n     blinker.board = [\n         [0, 1, 0],\n         [0, 1, 0],\n         [0, 1, 0]\n     ];\n     var glider = new GameOfLife();\n     glider.board = [\n         [0, 0, 0, 0, 0, 0],\n         [0, 0, 1, 0, 0, 0],\n         [0, 0, 0, 1, 0, 0],\n         [0, 1, 1, 1, 0, 0],\n         [0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0]\n     ];\n     var random = new GameOfLife();\n     random.init(null, 8, 8);\n     // Get canvas contexts or return 1\n     blinker.canvas = document.getElementById('blinker');\n     glider.canvas = document.getElementById('glider');\n     random.canvas = document.getElementById('random');\n     if (blinker.canvas.getContext && glider.canvas.getContext && random.canvas.getContext) {\n         blinker.ctx = blinker.canvas.getContext('2d');\n         glider.ctx = glider.canvas.getContext('2d');\n         random.ctx = random.canvas.getContext('2d');\n     } else {\n         return 1;\n     }\n     // Run main() at set interval\n     setInterval(function() {\n         run(glider, glider.ctx, 25, 25)\n     }, 250);\n     setInterval(function() {\n         run(blinker, blinker.ctx, 25, 25)\n     }, 250);\n     setInterval(function() {\n         run(random, random.ctx, 25, 25)\n     }, 250);\n     return 0;\n }\n\n function run(game, ctx, w, h) {\n     game.print(ctx, w, h);\n     game.nextGen()\n     return 0;\n }"," const _ = require('lodash');\n ///////////////////\n // LODASH IMPORT //\n ///////////////////\n // import all lodash functions to the main namespace, but isNaN not to cause conflicts\n _.each(_.keys(_), k => global[k === 'isNaN' ? '_isNaN' : k] = _[k]);\n ///////////////\n // FUNCTIONS //\n ///////////////\n const WORLD_WIDTH = 3,\n     WORLD_HEIGHT = 3,\n     displayWorld = (world) => console.log(map(world, x => x.join(' ')).join('\\n') + '\\n'),\n     aliveNeighbours = (world, x, y) => chain(range(-1, 2))\n     .reduce((acc, i) => acc.concat(map(range(-1, 2), ii => [i, ii])), [])\n     .reject(partial(isEqual, [0, 0]))\n     .map(i => {\n         try {\n             return world[x + i[0]][y + i[1]];\n         } catch (err) {\n             return null;\n         }\n     })\n     .compact()\n     .value()\n     .length,\n     isAlive = (cell, numAliveNeighbours) => (cell === 1 && inRange(numAliveNeighbours, 2, 4)) || (cell === 0 && numAliveNeighbours === 3) ? 1 : 0,\n     updateWorld = (world) => map(world, (row, rowidx) => map(row, (cell, colidx) => isAlive(cell, aliveNeighbours(world, rowidx, colidx))));\n // let world = map(range(WORLD_WIDTH), partial(ary(map, 2), range(WORLD_HEIGHT), partial(random, 0, 1, false)));\n let world = [\n     [0, 0, 0],\n     [1, 1, 1],\n     [0, 0, 0]\n ];\n setInterval(() => {\n     world = updateWorld(world)\n     displayWorld(world);\n }, 1000);"],"uncertainCodeArray":[],"textArray":[]}