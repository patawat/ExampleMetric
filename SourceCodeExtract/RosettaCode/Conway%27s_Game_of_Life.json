{"isSuccess":true,"url":"http://rosettacode.org/wiki/Conway%27s_Game_of_Life","codeArray":["function GameOfLife () {\n  \tthis.init = function (turns,width,height) {\n  \t\tthis.board = new Array(height);\n  \t\tfor (var x = 0; x < height; x++) {\n  \t\t\tthis.board[x] = new Array(width);\n  \t\t\tfor (var y = 0; y < width; y++) {\n  \t\t\t\tthis.board[x][y] = Math.round(Math.random());\n  \t\t\t}\n  \t\t}\n  \t\tthis.turns = turns;\n  \t}\n  \tthis.nextGen = function() {\n  \t\tthis.boardNext = new Array(this.board.length);\n  \t\tfor (var i = 0; i < this.board.length; i++) {\n  \t\t\tthis.boardNext[i] = new Array(this.board[i].length);\n  \t\t}\n  \t\tfor (var x = 0; x < this.board.length; x++) {\n  \t\t\tfor (var y = 0; y < this.board[x].length; y++) {\n  \t\t\t\tvar n = 0;\n  \t\t\t\tfor (var dx = -1; dx <= 1; dx++) {\n  \t\t\t\t\tfor (var dy = -1; dy <= 1; dy++) {\n  \t\t\t\t\t\tif ( dx == 0 && dy == 0){}\n  \t\t\t\t\t\telse if (typeof this.board[x+dx] !== 'undefined'\n  \t\t\t\t\t\t\t\t&& typeof this.board[x+dx][y+dy] !== 'undefined'\n  \t\t\t\t\t\t\t\t&& this.board[x+dx][y+dy]) {\n  \t\t\t\t\t\t\tn++;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\t\n  \t\t\t\t}\n  \t\t\t\tvar c = this.board[x][y];\n  \t\t\t\tswitch (n) {\n  \t\t\t\t\tcase 0:\n  \t\t\t\t\tcase 1:\n  \t\t\t\t\t\tc = 0;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t\tcase 2:\n  \t\t\t\t\t\tbreak; \n  \t\t\t\t\tcase 3:\n  \t\t\t\t\t\tc = 1;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t\tdefault:\n  \t\t\t\t\t\tc = 0;\n  \t\t\t\t}\n  \t\t\t\tthis.boardNext[x][y] = c;\n  \t\t\t}\n  \t\t}\n  \t\tthis.board = this.boardNext.slice();\n  \t}\n  \tthis.print = function() {\n  \t\tfor (var x = 0; x < this.board.length; x++) {\n  \t\t\tvar l = \"\";\n  \t\t\tfor (var y = 0; y < this.board[x].length; y++) {\n  \t\t\t\tif (this.board[x][y])\n  \t\t\t\t\tl += \"X\";\n  \t\t\t\telse\n  \t\t\t\t\tl += \" \";\n  \t\t\t}\n  \t\t\tprint(l);\n  \t\t}\n  \t}\n  \tthis.start = function() {\n  \t\tfor (var t = 0; t < this.turns; t++) {\n  \t\t\tprint(\"---\\nTurn \"+(t+1));\n  \t\t\tthis.print();\n  \t\t\tthis.nextGen()\n  \t\t}\n  \t}\n  }\n  var game = new GameOfLife();\n  print(\"---\\n3x3 Blinker over three turns.\");\n  game.init(3);\n  game.board = [\n  \t[0,0,0],\n  \t[1,1,1],\n  \t[0,0,0]];\n  game.start();\n  print(\"---\\n10x6 Glider over five turns.\");\n  game.init(5);\n  game.board = [\n  \t[0,0,0,0,0,0,0,0,0,0],\n  \t[0,0,1,0,0,0,0,0,0,0],\n  \t[0,0,0,1,0,0,0,0,0,0],\n  \t[0,1,1,1,0,0,0,0,0,0],\n  \t[0,0,0,0,0,0,0,0,0,0],\n  \t[0,0,0,0,0,0,0,0,0,0]];\n  game.start();\n  print(\"---\\nRandom 5x10\");\n  game.init(5,5,10);\n  game.start(); \n  <html> \n  \t<head> \n  \t\t<title></title> \n  \t\t<script type=\"text/javascript\"> \n  function GameOfLife () {\n  \tthis.init = function (turns,width,height) {\n  \t\tthis.board = new Array(height);\n  \t\tfor (var x = 0; x < height; x++) {\n  \t\t\tthis.board[x] = new Array(width);\n  \t\t\tfor (var y = 0; y < width; y++) {\n  \t\t\t\tthis.board[x][y] = Math.round(Math.random());\n  \t\t\t}\n  \t\t}\n  \t\tthis.turns = turns;\n  \t}\n  \tthis.nextGen = function() {\n  \t\tthis.boardNext = new Array(this.board.length);\n  \t\tfor (var i = 0; i < this.board.length; i++) {\n  \t\t\tthis.boardNext[i] = new Array(this.board[i].length);\n  \t\t}\n  \t\tfor (var x = 0; x < this.board.length; x++) {\n  \t\t\tfor (var y = 0; y < this.board[x].length; y++) {\n  \t\t\t\tvar n = 0;\n  \t\t\t\tfor (var dx = -1; dx <= 1; dx++) {\n  \t\t\t\t\tfor (var dy = -1; dy <= 1; dy++) {\n  \t\t\t\t\t\tif ( dx == 0 && dy == 0){}\n  \t\t\t\t\t\telse if (typeof this.board[x+dx] !== 'undefined'\n  \t\t\t\t\t\t\t\t&& typeof this.board[x+dx][y+dy] !== 'undefined'\n  \t\t\t\t\t\t\t\t&& this.board[x+dx][y+dy]) {\n  \t\t\t\t\t\t\tn++;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\t\n  \t\t\t\t}\n  \t\t\t\tvar c = this.board[x][y];\n  \t\t\t\tswitch (n) {\n  \t\t\t\t\tcase 0:\n  \t\t\t\t\tcase 1:\n  \t\t\t\t\t\tc = 0;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t\tcase 2:\n  \t\t\t\t\t\tbreak; \n  \t\t\t\t\tcase 3:\n  \t\t\t\t\t\tc = 1;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t\tdefault:\n  \t\t\t\t\t\tc = 0;\n  \t\t\t\t}\n  \t\t\t\tthis.boardNext[x][y] = c;\n  \t\t\t}\n  \t\t}\n  \t\tthis.board = this.boardNext.slice();\n  \t}\n  \tthis.print = function(ctx,w,h) {\n  \t\tif (!w)\n  \t\t\tw = 8;\n  \t\tif (!h)\n  \t\t\th = 8;\n  \t\tfor (var x = 0; x < this.board.length; x++) {\n  \t\t\tvar l = \"\";\n  \t\t\tfor (var y = 0; y < this.board[x].length; y++) {\n  \t\t\t\tif (this.board[x][y])\n  \t\t\t\t// x and y reversed to draw matrix like it looks in source\n  \t\t\t\t// rather than the \"actual\" positions\n  \t\t\t\t\tctx.fillStyle = \"orange\";\n  \t\t\t\telse\n  \t\t\t\t\tctx.fillStyle = \"black\";\n  \t\t\t\tctx.fillRect(y*h,x*w,h,w);\n  \t\t\t}\n  \t\t}\n  \t}\n  \tthis.start = function(ctx,w,h) {\n  \t\tfor (var t = 0; t < this.turns; t++) {\n  \t\t\tthis.print(ctx,w,h);\n  \t\t\tthis.nextGen()\n  \t\t}\n  \t}\n  }\n  function init() {\n  \t// Change document title and text under canvas\n  \tdocument.title = \"Conway's Game of Life\";\n  \t// Setup game boards for Conway's Game of Life\n  \tvar blinker = new GameOfLife();\n  \tblinker.board = [\n  \t\t[0,1,0],\n  \t\t[0,1,0],\n  \t\t[0,1,0]];\n  \tvar glider = new GameOfLife();\n  \tglider.board = [\n  \t\t[0,0,0,0,0,0],\n  \t\t[0,0,1,0,0,0],\n  \t\t[0,0,0,1,0,0],\n  \t\t[0,1,1,1,0,0],\n  \t\t[0,0,0,0,0,0],\n  \t\t[0,0,0,0,0,0]];\n  \tvar random = new GameOfLife();\n  \trandom.init(null,8,8);\n  \t// Get canvas contexts or return 1\n  \tblinker.canvas = document.getElementById('blinker');\n  \tglider.canvas = document.getElementById('glider');\n  \trandom.canvas = document.getElementById('random');\n  \tif (blinker.canvas.getContext && glider.canvas.getContext && random.canvas.getContext) {\n  \t\tblinker.ctx = blinker.canvas.getContext('2d');\n  \t\tglider.ctx = glider.canvas.getContext('2d');\n  \t\trandom.ctx = random.canvas.getContext('2d');\n  \t} else {\n  \t\treturn 1;\n  \t}\n  \t// Run main() at set interval\n  \tsetInterval(function(){run(glider,glider.ctx,25,25)},250);\n  \tsetInterval(function(){run(blinker,blinker.ctx,25,25)},250);\n  \tsetInterval(function(){run(random,random.ctx,25,25)},250);\n  \treturn 0;\n  }\n  function run(game,ctx,w,h) {\n  \tgame.print(ctx,w,h);\n  \tgame.nextGen()\n  \treturn 0;\n  }\n  \t\t</script> \n  \t</head> \n  \t<body onLoad=\"init();\"> \n  \t\t3x3 Blinker<br> \n  \t\t<canvas id=\"blinker\" width=\"75\" height=\"75\"> \n  \t\t\tNo canvas support found!\n  \t\t</canvas><br><br> \n  \t\t6x6 Glider<br> \n  \t\t<canvas id=\"glider\" width=\"150\" height=\"150\"> \n  \t\t\tNo canvas support found!\n  \t\t</canvas><br><br> \n  \t\t8x8 Random<br> \n  \t\t<canvas id=\"random\" width=\"200\" height=\"200\"> \n  \t\t\tNo canvas support found!\n  \t\t</canvas><br> \n  \t</body> \n  </html> \n  const _ = require('lodash');\n  ///////////////////\n  // LODASH IMPORT //\n  ///////////////////\n  // import all lodash functions to the main namespace, but isNaN not to cause conflicts\n  _.each(_.keys(_), k => global[k === 'isNaN' ? '_isNaN' : k] = _[k]);\n  ///////////////\n  // FUNCTIONS //\n  ///////////////\n  const WORLD_WIDTH  = 3,\n        WORLD_HEIGHT = 3,\n        displayWorld = (world) => console.log(map(world, x => x.join(' ')).join('\\n') + '\\n'),\n        aliveNeighbours = (world, x, y) => chain(range(-1, 2))\n                                            .reduce((acc, i) => acc.concat(map(range(-1, 2), ii => [i, ii])), [])\n                                            .reject(partial(isEqual, [0, 0]))\n                                            .map(i => {\n                                              try {\n                                                return world[x + i[0]][y + i[1]];\n                                              } catch (err) {\n                                                return null;\n                                              }\n                                            })\n                                            .compact()\n                                            .value()\n                                            .length,\n        isAlive = (cell, numAliveNeighbours) => (cell === 1 && inRange(numAliveNeighbours, 2, 4)) || (cell === 0 && numAliveNeighbours === 3) ? 1 : 0,\n        updateWorld = (world) => map(world, (row, rowidx) => map(row, (cell, colidx) => isAlive(cell, aliveNeighbours(world, rowidx, colidx))));\n  // let world = map(range(WORLD_WIDTH), partial(ary(map, 2), range(WORLD_HEIGHT), partial(random, 0, 1, false)));\n  let world = [[0, 0, 0], [1, 1, 1], [0, 0, 0]];\n  setInterval(() => {\n    world = updateWorld(world)\n    displayWorld(world);\n  }, 1000);"],"uncertainCodeArray":[],"textArray":[]}