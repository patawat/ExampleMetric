{"isSuccess":true,"url":"http://rosettacode.org//wiki/Chat_server","codeArray":["var net = require(\"net\");\n  var sys = require(\"sys\");\n  var EventEmitter = require(\"events\").EventEmitter;\n  /*******************************************************************************\n   * ChatServer\n   *\n   * Manages connections, users, and chat messages.\n   ******************************************************************************/\n  function ChatServer() {\n    this.chatters = {};\n    this.server   = net.createServer(this.handleConnection.bind(this));\n    this.server.listen(1212, \"localhost\");\n  }\n  ChatServer.prototype.isNicknameLegal = function(nickname) {\n    // A nickname may contain letters or numbers only,\n    // and may only be used once.\n    if(nickname.replace(/[A-Za-z0-9]*/, '') != \"\") {\n      return false\n    }\n    for(used_nick in this.chatters) {\n      if(used_nick == nickname) {\n        return false;\n      }\n    }\n    return true;\n  };\n  ChatServer.prototype.handleConnection = function(connection) {\n    console.log(\"Incoming connection from \" + connection.remoteAddress);\n    connection.setEncoding(\"utf8\");\n    var chatter = new Chatter(connection, this);\n    chatter.on(\"chat\", this.handleChat.bind(this));\n    chatter.on(\"join\", this.handleJoin.bind(this));\n    chatter.on(\"leave\", this.handleLeave.bind(this));\n  };\n  ChatServer.prototype.handleChat = function(chatter, message) {\n    this.sendToEveryChatterExcept(chatter, chatter.nickname + \": \" + message);\n  };\n  ChatServer.prototype.handleJoin = function(chatter) {\n    console.log(chatter.nickname + \" has joined the chat.\");\n    this.sendToEveryChatter(chatter.nickname + \" has joined the chat.\");\n    this.addChatter(chatter);\n  };\n  ChatServer.prototype.handleLeave = function(chatter) {\n    console.log(chatter.nickname + \" has left the chat.\");\n    this.removeChatter(chatter);\n    this.sendToEveryChatter(chatter.nickname + \" has left the chat.\");\n  };\n  ChatServer.prototype.addChatter = function(chatter) {\n    this.chatters[chatter.nickname] = chatter;\n  };\n  ChatServer.prototype.removeChatter = function(chatter) {\n    delete this.chatters[chatter.nickname];\n  };\n  ChatServer.prototype.sendToEveryChatter = function(data) {\n    for(nickname in this.chatters) {\n      this.chatters[nickname].send(data);\n    }\n  };\n  ChatServer.prototype.sendToEveryChatterExcept = function(chatter, data) {\n    for(nickname in this.chatters) {\n      if(nickname != chatter.nickname) {\n        this.chatters[nickname].send(data);\n      }\n    }\n  };\n  /*******************************************************************************\n   * Chatter\n   *\n   * Represents a single user/connection in the chat server.\n   ******************************************************************************/\n  function Chatter(socket, server) {\n    EventEmitter.call(this);\n    this.socket     = socket;\n    this.server     = server;\n    this.nickname   = \"\";\n    this.lineBuffer = new SocketLineBuffer(socket);\n    this.lineBuffer.on(\"line\", this.handleNickname.bind(this));\n    this.socket.on(\"close\", this.handleDisconnect.bind(this));\n    this.send(\"Welcome! What is your nickname?\");\n  };\n  sys.inherits(Chatter, EventEmitter);\n  Chatter.prototype.handleNickname = function(nickname) {\n    if(server.isNicknameLegal(nickname)) {\n      this.nickname = nickname;\n      this.lineBuffer.removeAllListeners(\"line\");\n      this.lineBuffer.on(\"line\", this.handleChat.bind(this));\n      this.send(\"Welcome to the chat, \" + nickname + \"!\");\n      this.emit(\"join\", this);\n    } else {\n      this.send(\"Sorry, but that nickname is not legal or is already in use!\");\n      this.send(\"What is your nickname?\");\n    }\n  };\n  Chatter.prototype.handleChat = function(line) {\n    this.emit(\"chat\", this, line);\n  };\n  Chatter.prototype.handleDisconnect = function() {\n    this.emit(\"leave\", this);\n  };\n  Chatter.prototype.send = function(data) {\n    this.socket.write(data + \"\\r\\n\");\n  };\n  /*******************************************************************************\n   * SocketLineBuffer\n   *\n   * Listens for and buffers incoming data on a socket and emits a 'line' event\n   * whenever a complete line is detected.\n   ******************************************************************************/\n  function SocketLineBuffer(socket) {\n    EventEmitter.call(this);\n    this.socket = socket;\n    this.buffer = \"\";\n    this.socket.on(\"data\", this.handleData.bind(this));\n  };\n  sys.inherits(SocketLineBuffer, EventEmitter);\n  SocketLineBuffer.prototype.handleData = function(data) {\n    for(var i = 0; i < data.length; i++) {\n      var char = data.charAt(i);\n      this.buffer += char;\n      if(char == \"\\n\") {\n        this.buffer = this.buffer.replace(\"\\r\\n\", \"\");\n        this.buffer = this.buffer.replace(\"\\n\", \"\");\n        this.emit(\"line\", this.buffer);\n        this.buffer = \"\";\n      }\n    }\n  };\n  // Start the server!\n  server = new ChatServer();"],"uncertainCodeArray":[],"textArray":[]}