{"isSuccess":true,"url":"http://rosettacode.org//wiki/Flipping_bits_game","codeArray":["function numOfRows(board) { return board.length; }\n  function numOfCols(board) { return board[0].length; }\n  function boardToString(board) {\n      // First the top-header\n      var header = '   ';\n      for (var c = 0; c < numOfCols(board); c++)\n          header += c + ' ';\n      // Then the side-header + board\n      var sideboard = [];\n      for (var r = 0; r < numOfRows(board); r++) {\n          sideboard.push(r + ' [' + board[r].join(' ') + ']');\n      }\n      return header + '\\n' + sideboard.join('\\n');\n  }\n  function flipRow(board, row) {\n      for (var c = 0; c < numOfCols(board); c++) {\n          board[row][c] = 1 - board[row][c];\n      }\n  }\n  function flipCol(board, col) {\n      for (var r = 0; r < numOfRows(board); r++) {\n          board[r][col] = 1 - board[r][col];\n      }\n  }\n  function playFlippingBitsGame(rows, cols) {\n      rows = rows | 3;\n      cols = cols | 3;\n      var targetBoard = [];\n      var manipulatedBoard = [];\n      // Randomly generate two identical boards.\n      for (var r = 0; r < rows; r++) {\n          targetBoard.push([]);\n          manipulatedBoard.push([]);\n          for (var c = 0; c < cols; c++) {\n              targetBoard[r].push(Math.floor(Math.random() * 2));\n              manipulatedBoard[r].push(targetBoard[r][c]);\n          }\n      }\n      // Naive-scramble one of the boards.\n      while (boardToString(targetBoard) == boardToString(manipulatedBoard)) {\n          var scrambles = rows * cols;\n          while (scrambles-- > 0) {\n              if (0 == Math.floor(Math.random() * 2)) {\n                  flipRow(manipulatedBoard, Math.floor(Math.random() * rows));\n              }\n              else {\n                  flipCol(manipulatedBoard, Math.floor(Math.random() * cols));\n              }\n          }\n      }\n      // Get the user to solve.\n      alert(\n          'Try to match both boards.\\n' +\n          'Enter `r<num>` or `c<num>` to manipulate a row or col or enter `q` to quit.'\n          );\n      var input = '', letter, num, moves = 0;\n      while (boardToString(targetBoard) != boardToString(manipulatedBoard) && input != 'q') {\n          input = prompt(\n              'Target:\\n' + boardToString(targetBoard) +\n              '\\n\\n\\n' +\n              'Board:\\n' + boardToString(manipulatedBoard)\n              );\n          try {\n              letter = input.charAt(0);\n              num = parseInt(input.slice(1));\n              if (letter == 'q')\n  \t\t\t\tbreak;\n              if (isNaN(num)\n                  || (letter != 'r' && letter != 'c')\n                  || (letter == 'r' && num >= rows)\n                  || (letter == 'c' && num >= cols)\n                  ) {\n                  throw new Error('');\n              }\n              if (letter == 'r') {\n                  flipRow(manipulatedBoard, num);\n              }\n              else {\n                  flipCol(manipulatedBoard, num);\n              }\n              moves++;\n          }\n          catch(e) {\n              alert('Uh-oh, there seems to have been an input error');\n          }\n      }\n      if (input == 'q') {\n          alert('~~ Thanks for playing ~~');\n      }\n      else {\n          alert('Completed in ' + moves + ' moves.');\n      }\n  }"],"uncertainCodeArray":[],"textArray":[]}