{"isSuccess":true,"url":"http://rosettacode.org//wiki/Knapsack_problem/Bounded","codeArray":["var data = [{\n    name: 'map',\n    weight: 9,\n    value: 150,\n    pieces: 1\n}, {\n    name: 'compass',\n    weight: 13,\n    value: 35,\n    pieces: 1\n}, {\n    name: 'water',\n    weight: 153,\n    value: 200,\n    pieces: 2\n}, {\n    name: 'sandwich',\n    weight: 50,\n    value: 60,\n    pieces: 2\n}, {\n    name: 'glucose',\n    weight: 15,\n    value: 60,\n    pieces: 2\n}, {\n    name: 'tin',\n    weight: 68,\n    value: 45,\n    pieces: 3\n}, {\n    name: 'banana',\n    weight: 27,\n    value: 60,\n    pieces: 3\n}, {\n    name: 'apple',\n    weight: 39,\n    value: 40,\n    pieces: 3\n}, {\n    name: 'cheese',\n    weight: 23,\n    value: 30,\n    pieces: 1\n}, {\n    name: 'beer',\n    weight: 52,\n    value: 10,\n    pieces: 3\n}, {\n    name: 'suntan, cream',\n    weight: 11,\n    value: 70,\n    pieces: 1\n}, {\n    name: 'camera',\n    weight: 32,\n    value: 30,\n    pieces: 1\n}, {\n    name: 'T-shirt',\n    weight: 24,\n    value: 15,\n    pieces: 2\n}, {\n    name: 'trousers',\n    weight: 48,\n    value: 10,\n    pieces: 2\n}, {\n    name: 'umbrella',\n    weight: 73,\n    value: 40,\n    pieces: 1\n}, {\n    name: 'waterproof, trousers',\n    weight: 42,\n    value: 70,\n    pieces: 1\n}, {\n    name: 'waterproof, overclothes',\n    weight: 43,\n    value: 75,\n    pieces: 1\n}, {\n    name: 'note-case',\n    weight: 22,\n    value: 80,\n    pieces: 1\n}, {\n    name: 'sunglasses',\n    weight: 7,\n    value: 20,\n    pieces: 1\n}, {\n    name: 'towel',\n    weight: 18,\n    value: 12,\n    pieces: 2\n}, {\n    name: 'socks',\n    weight: 4,\n    value: 50,\n    pieces: 1\n}, {\n    name: 'book',\n    weight: 30,\n    value: 10,\n    pieces: 2\n}];\n\nfunction findBestPack() {\n    var m = [\n        [0]\n    ]; // maximum pack value found so far\n    var b = [\n        [0]\n    ]; // best combination found so far\n    var opts = [0]; // item index for 0 of item 0 \n    var P = [1]; // item encoding for 0 of item 0\n    var choose = 0;\n    for (var j = 0; j < data.length; j++) {\n        opts[j + 1] = opts[j] + data[j].pieces; // item index for 0 of item j+1\n        P[j + 1] = P[j] * (1 + data[j].pieces); // item encoding for 0 of item j+1\n    }\n    for (var j = 0; j < opts[data.length]; j++) {\n        m[0][j + 1] = b[0][j + 1] = 0; // best values and combos for empty pack: nothing\n    }\n    for (var w = 1; w <= 400; w++) {\n        m[w] = [0];\n        b[w] = [0];\n        for (var j = 0; j < data.length; j++) {\n            var N = data[j].pieces; // how many of these can we have?\n            var base = opts[j]; // what is the item index for 0 of these?\n            for (var n = 1; n <= N; n++) {\n                var W = n * data[j].weight; // how much do these items weigh?\n                var s = w >= W ? 1 : 0; // can we carry this many?\n                var v = s * n * data[j].value; // how much are they worth?\n                var I = base + n; // what is the item number for this many?\n                var wN = w - s * W; // how much other stuff can we be carrying?\n                var C = n * P[j] + b[wN][base]; // encoded combination\n                m[w][I] = Math.max(m[w][I - 1], v + m[wN][base]); // best value\n                choose = b[w][I] = m[w][I] > m[w][I - 1] ? C : b[w][I - 1];\n            }\n        }\n    }\n    var best = [];\n    for (var j = data.length - 1; j >= 0; j--) {\n        best[j] = Math.floor(choose / P[j]);\n        choose -= best[j] * P[j];\n    }\n    var out = '<table><tr><td><b>Count</b></td><td><b>Item</b></td><th>unit weight</th><th>unit value</th>';\n    var wgt = 0;\n    var val = 0;\n    for (var i = 0; i < best.length; i++) {\n        if (0 == best[i]) continue;\n        out += '</tr><tr><td>' + best[i] + '</td><td>' + data[i].name + '</td><td>' + data[i].weight + '</td><td>' + data[i].value + '</td>'\n        wgt += best[i] * data[i].weight;\n        val += best[i] * data[i].value;\n    }\n    out += '</tr></table><br/>Total weight: ' + wgt;\n    out += '<br/>Total value: ' + val;\n    document.body.innerHTML = out;\n}\nfindBestPack();"],"uncertainCodeArray":[],"textArray":[]}