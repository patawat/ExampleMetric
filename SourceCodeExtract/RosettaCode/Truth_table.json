{"isSuccess":true,"url":"http://rosettacode.org//wiki/Truth_table","codeArray":["<!DOCTYPE html><html><head><title>Truth table</title><script>\n  var elem,expr,vars;\n  function isboolop(chr){return \"&|!^\".indexOf(chr)!=-1;}\n  function varsindexof(chr){\n  \tvar i;\n  \tfor(i=0;i<vars.length;i++){if(vars[i][0]==chr)return i;}\n  \treturn -1;\n  }\n  function printtruthtable(){\n  \tvar i,str;\n  \telem=document.createElement(\"pre\");\n  \texpr=prompt(\"Boolean expression:\\nAccepts single-character variables (except for \\\"T\\\" and \\\"F\\\", which specify explicit true or false values), postfix, with \\\"&|!^\\\" for and, or, not, xor, respectively; optionally seperated by whitespace.\").replace(/\\s/g,\"\");\n  \tvars=[];\n  \tfor(i=0;i<expr.length;i++)if(!isboolop(expr[i])&&expr[i]!=\"T\"&&expr[i]!=\"F\"&&varsindexof(expr[i])==-1)vars.push([expr[i],-1]);\n  \tif(vars.length==0)return;\n  \tstr=\"\";\n  \tfor(i=0;i<vars.length;i++)str+=vars[i][0]+\" \";\n  \telem.innerHTML=\"<b>\"+str+expr+\"</b>\\n\";\n  \tvars[0][1]=false;\n  \ttruthpartfor(1);\n  \tvars[0][1]=true;\n  \ttruthpartfor(1);\n  \tvars[0][1]=-1;\n  \tdocument.body.appendChild(elem);\n  }\n  function truthpartfor(index){\n  \tif(index==vars.length){\n  \t\tvar str,i;\n  \t\tstr=\"\";\n  \t\tfor(i=0;i<index;i++)str+=(vars[i][1]?\"<b>T</b>\":\"F\")+\" \";\n  \t\telem.innerHTML+=str+(parsebool()?\"<b>T</b>\":\"F\")+\"\\n\";\n  \t\treturn;\n  \t}\n  \tvars[index][1]=false;\n  \ttruthpartfor(index+1);\n  \tvars[index][1]=true;\n  \ttruthpartfor(index+1);\n  \tvars[index][1]=-1;\n  }\n  function parsebool(){\n  \tvar stack,i,idx;\n  \tconsole.log(vars);\n  \tstack=[];\n  \tfor(i=0;i<expr.length;i++){\n  \t\tif(expr[i]==\"T\")stack.push(true);\n  \t\telse if(expr[i]==\"F\")stack.push(false);\n  \t\telse if((idx=varsindexof(expr[i]))!=-1)stack.push(vars[idx][1]);\n  \t\telse if(isboolop(expr[i])){\n  \t\t\tswitch(expr[i]){\n  \t\t\t\tcase \"&\":stack.push(stack.pop()&stack.pop());break;\n  \t\t\t\tcase \"|\":stack.push(stack.pop()|stack.pop());break;\n  \t\t\t\tcase \"!\":stack.push(!stack.pop());break;\n  \t\t\t\tcase \"^\":stack.push(stack.pop()^stack.pop());break;\n  \t\t\t}\n  \t\t} else alert(\"Non-conformant character \"+expr[i]+\" in expression. Should not be possible.\");\n  \t\tconsole.log(stack);\n  \t}\n  \treturn stack[0];\n  }\n  </script></head><body onload=\"printtruthtable()\"></body></html>"],"uncertainCodeArray":[],"textArray":[]}