{"isSuccess":true,"url":"http://rosettacode.org//wiki/Truth_table","codeArray":["var elem, expr, vars;\n\nfunction isboolop(chr) {\n    return \"&|!^\".indexOf(chr) != -1;\n}\n\nfunction varsindexof(chr) {\n    var i;\n    for (i = 0; i < vars.length; i++) {\n        if (vars[i][0] == chr) return i;\n    }\n    return -1;\n}\n\nfunction printtruthtable() {\n    var i, str;\n    elem = document.createElement(\"pre\");\n    expr = prompt(\"Boolean expression:\\nAccepts single-character variables (except for \\\"T\\\" and \\\"F\\\", which specify explicit true or false values), postfix, with \\\"&|!^\\\" for and, or, not, xor, respectively; optionally seperated by whitespace.\").replace(/\\s/g, \"\");\n    vars = [];\n    for (i = 0; i < expr.length; i++)\n        if (!isboolop(expr[i]) && expr[i] != \"T\" && expr[i] != \"F\" && varsindexof(expr[i]) == -1) vars.push([expr[i], -1]);\n    if (vars.length == 0) return;\n    str = \"\";\n    for (i = 0; i < vars.length; i++) str += vars[i][0] + \" \";\n    elem.innerHTML = \"<b>\" + str + expr + \"</b>\\n\";\n    vars[0][1] = false;\n    truthpartfor(1);\n    vars[0][1] = true;\n    truthpartfor(1);\n    vars[0][1] = -1;\n    document.body.appendChild(elem);\n}\n\nfunction truthpartfor(index) {\n    if (index == vars.length) {\n        var str, i;\n        str = \"\";\n        for (i = 0; i < index; i++) str += (vars[i][1] ? \"<b>T</b>\" : \"F\") + \" \";\n        elem.innerHTML += str + (parsebool() ? \"<b>T</b>\" : \"F\") + \"\\n\";\n        return;\n    }\n    vars[index][1] = false;\n    truthpartfor(index + 1);\n    vars[index][1] = true;\n    truthpartfor(index + 1);\n    vars[index][1] = -1;\n}\n\nfunction parsebool() {\n    var stack, i, idx;\n    console.log(vars);\n    stack = [];\n    for (i = 0; i < expr.length; i++) {\n        if (expr[i] == \"T\") stack.push(true);\n        else if (expr[i] == \"F\") stack.push(false);\n        else if ((idx = varsindexof(expr[i])) != -1) stack.push(vars[idx][1]);\n        else if (isboolop(expr[i])) {\n            switch (expr[i]) {\n                case \"&\":\n                    stack.push(stack.pop() & stack.pop());\n                    break;\n                case \"|\":\n                    stack.push(stack.pop() | stack.pop());\n                    break;\n                case \"!\":\n                    stack.push(!stack.pop());\n                    break;\n                case \"^\":\n                    stack.push(stack.pop() ^ stack.pop());\n                    break;\n            }\n        } else alert(\"Non-conformant character \" + expr[i] + \" in expression. Should not be possible.\");\n        console.log(stack);\n    }\n    return stack[0];\n}"],"uncertainCodeArray":[],"textArray":[]}