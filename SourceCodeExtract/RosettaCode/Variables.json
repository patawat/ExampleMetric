{"isSuccess":true,"url":"http://rosettacode.org//wiki/Variables","codeArray":["// a globally-scoped variable\n  var a=1;\n  // global scope\n  function one(){\n      alert(a); \n  }\n  // local scope\n  function two(a){\n      alert(a);\n  }\n  // local scope again\n  function three(){\n    var a = 3;\n    alert(a);\n  }\n  // Intermediate: no such thing as block scope in javascript\n  function four(){\n      if(true){\n          var a=4;\n      }\n      alert(a); // alerts '4', not the global value of '1'\n  }\n  // Intermediate: object properties\n  function Five(){\n      this.a = 5;\n  }\n  // Advanced: closure\n  var six = function(){\n      var foo = 6;\n      return function(){\n          // javascript \"closure\" means I have access to foo in here, \n          // because it is defined in the function in which I was defined.\n          alert(foo);\n      }\n  }()\n  // Advanced: prototype-based scope resolution\n  function Seven(){\n    this.a = 7;\n  }\n  // [object].prototype.property loses to [object].property in the scope chain\n  Seven.prototype.a = -1; // won't get reached, because 'a' is set in the constructor above.\n  Seven.prototype.b = 8; // Will get reached, even though 'b' is NOT set in the constructor.\n  // These will print 1-8\n  one();\n  two(2);\n  three();\n  four();\n  alert(new Five().a);\n  six();\n  alert(new Seven().a);\n  alert(new Seven().b);"],"uncertainCodeArray":[],"textArray":[]}