{"isSuccess":true,"url":"http://rosettacode.org//wiki/Variables","codeArray":["// a globally-scoped variable\nvar a = 1;\n// global scope\nfunction one() {\n    alert(a);\n}\n// local scope\nfunction two(a) {\n    alert(a);\n}\n// local scope again\nfunction three() {\n    var a = 3;\n    alert(a);\n}\n// Intermediate: no such thing as block scope in javascript\nfunction four() {\n    if (true) {\n        var a = 4;\n    }\n    alert(a); // alerts '4', not the global value of '1'\n}\n// Intermediate: object properties\nfunction Five() {\n    this.a = 5;\n}\n// Advanced: closure\nvar six = function() {\n        var foo = 6;\n        return function() {\n            // javascript \"closure\" means I have access to foo in here, \n            // because it is defined in the function in which I was defined.\n            alert(foo);\n        }\n    }()\n    // Advanced: prototype-based scope resolution\nfunction Seven() {\n    this.a = 7;\n}\n// [object].prototype.property loses to [object].property in the scope chain\nSeven.prototype.a = -1; // won't get reached, because 'a' is set in the constructor above.\nSeven.prototype.b = 8; // Will get reached, even though 'b' is NOT set in the constructor.\n// These will print 1-8\none();\ntwo(2);\nthree();\nfour();\nalert(new Five().a);\nsix();\nalert(new Seven().a);\nalert(new Seven().b);"],"uncertainCodeArray":[],"textArray":[]}