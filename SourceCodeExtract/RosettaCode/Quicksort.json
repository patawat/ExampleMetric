{"isSuccess":true,"url":"http://rosettacode.org//wiki/Sorting_algorithms/Quicksort","codeArray":["function sort(array, less) {\n    function swap(i, j) {\n      var t = array[i];\n      array[i] = array[j];\n      array[j] = t;\n    }\n    function quicksort(left, right) {\n      if (left < right) {\n        var pivot = array[left + Math.floor((right - right) / 2)],\n            left_new = left,\n            right_new = right;\n        do {\n          while (less(array[left_new], pivot)) {\n            left_new += 1;\n          }\n          while (less(pivot, array[right_new])) {\n            right_new -= 1;\n          }\n          if (left_new <= right_new) {\n            swap(left_new, right_new);\n            left_new += 1;\n            right_new -= 1;\n          }\n        } while (left_new <= right_new);\n        quicksort(left, right_new);\n        quicksort(left_new, right);\n      }\n    }\n    quicksort(0, array.length - 1);\n    return array;\n  }var test_array = [10, 3, 11, 15, 19, 1];\n  var sorted_array = sort(test_array, function(a,b) { return a<b; });[ 1, 3, 10, 11, 15, 19 ]// quickSortÂ :: (Ord a) => [a] -> [a]  \n  function quickSort(xxs) {\n      if (xxs.length) {\n          var x = xxs[0],\n              xs = xxs.slice(1),\n              less = quickSort(xs.filter(function (a) {\n                  return a <= x;\n              })),\n              more = quickSort(xs.filter(function (a) {\n                  return a > x;\n              }));\n          return less\n              .concat([x])\n              .concat(more);\n      } else return xxs;\n  }\n  // TEST\n  quickSort([11.8, 14.1, 21.3, 8.5, 16.7, 5.7])Array.prototype.quick_sort = function () {\n      if (this.length < 2) { return this; }\n      var pivot = this[Math.round(this.length / 2)];\n      return this.filter(x => x <  pivot)\n                 .quick_sort()\n                 .concat(this.filter(x => x == pivot))\n                 .concat(this.filter(x => x >  pivot).quick_sort());\n  };"],"uncertainCodeArray":[],"textArray":[]}