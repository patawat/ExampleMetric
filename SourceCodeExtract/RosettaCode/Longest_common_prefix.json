{"isSuccess":true,"url":"http://rosettacode.org//wiki/Longest_common_prefix","codeArray":["(function() {\n    'use strict';\n\n    function lcp() {\n        var lst = [].slice.call(arguments),\n            n = lst.length ? takewhile(same, zip.apply(null, lst)).length : 0;\n        return n ? lst[0].substr(0, n) : '';\n    }\n    // (a -> Bool) -> [a] -> [a]\n    function takewhile(p, lst) {\n        var x = lst.length ? lst[0] : null;\n        return x !== null && p(x) ? [x].concat(takewhile(p, lst.slice(1))) : [];\n    }\n    // Zip arbitrary number of lists (an imperative implementation)\n    // [[a]] -> [[a]]\n    function zip() {\n        var lngLists = arguments.length,\n            lngMin = Infinity,\n            lstZip = [],\n            arrTuple = [],\n            lngLen, i, j;\n        for (i = lngLists; i--;) {\n            lngLen = arguments[i].length;\n            if (lngLen < lngMin) lngMin = lngLen;\n        }\n        for (i = 0; i < lngMin; i++) {\n            arrTuple = [];\n            for (j = 0; j < lngLists; j++) {\n                arrTuple.push(arguments[j][i]);\n            }\n            lstZip.push(arrTuple);\n        }\n        return lstZip;\n    }\n    // [a] -> Bool\n    function same(lst) {\n        return (lst.reduce(function(a, x) {\n            return a === x ? a : null;\n        }, lst[0])) !== null;\n    }\n    // TESTS\n    return [\n        lcp(\"interspecies\", \"interstellar\", \"interstate\") === \"inters\",\n        lcp(\"throne\", \"throne\") === \"throne\",\n        lcp(\"throne\", \"dungeon\") === \"\",\n        lcp(\"cheese\") === \"cheese\",\n        lcp(\"\") === \"\",\n        lcp(\"prefix\", \"suffix\") === \"\",\n        lcp(\"foo\", \"foobar\") == \"foo\"\n    ];\n})();","[true, true, true, true, true, true, true]","// Zip arbitrary number of lists (a functional implementation, this time)\n// Accepts arrays or strings, and returns [[a]]\nfunction zip() {\n    var args = [].slice.call(arguments),\n        lngMin = args.reduce(function(a, x) {\n            var n = x.length;\n            return n < a ? n : a;\n        }, Infinity);\n    if (lngMin) {\n        return args.reduce(function(a, v) {\n            return (\n                typeof v === 'string' ? v.split('') : v\n            ).slice(0, lngMin).map(a ? function(x, i) {\n                return a[i].concat(x);\n            } : function(x) {\n                return [x];\n            });\n        }, null)\n    } else return [];\n}"],"uncertainCodeArray":[],"textArray":[]}