{"isSuccess":true,"url":"http://rosettacode.org/wiki/Pascal%27s_triangle","codeArray":["// Pascal's triangle object\n  function pascalTriangle (rows) {\n  \t// Number of rows the triangle contains\n  \tthis.rows = rows;\n  \t// The 2D array holding the rows of the triangle\n  \tthis.triangle = new Array();\n  \tfor (var r = 0; r < rows; r++) {\n  \t\tthis.triangle[r] = new Array();\n  \t\tfor (var i = 0; i <= r; i++) {\n  \t\t\tif (i == 0 || i == r)\n  \t\t\t\tthis.triangle[r][i] = 1;\n  \t\t\telse\n  \t\t\t\tthis.triangle[r][i] = this.triangle[r-1][i-1]+this.triangle[r-1][i];\n  \t\t}\n  \t}\n  \t// Method to print the triangle\n  \tthis.print = function(base) {\n  \t\tif (!base)\n  \t\t\tbase = 10;\n  \t\t// Private method to calculate digits in number\n  \t\tvar digits = function(n,b) {\n  \t\t\tvar d = 0;\n  \t\t\twhile (n >= 1) {\n  \t\t\t\td++;\n  \t\t\t\tn /= b;\n  \t\t\t}\n  \t\t\treturn d;\n  \t\t}\n  \t\t// Calculate max spaces needed\n  \t\tvar spacing = digits(this.triangle[this.rows-1][Math.round(this.rows/2)],base);\n  \t\t// Private method to add spacing between numbers\n  \t\tvar insertSpaces = function(s) {\n  \t\t\tvar buf = \"\";\n  \t\t\twhile (s > 0) {\n  \t\t\t\ts--;\n  \t\t\t\tbuf += \" \";\n  \t\t\t}\n  \t\t\treturn buf;\n  \t\t}\n  \t\t// Print the triangle line by line\n  \t\tfor (var r = 0; r < this.triangle.length; r++) {\n  \t\t\tvar l = \"\";\n  \t\t\tfor (var s = 0; s < Math.round(this.rows-1-r); s++) {\n  \t\t\t\tl += insertSpaces(spacing);\n  \t\t\t}\n  \t\t\tfor (var i = 0; i < this.triangle[r].length; i++) {\n  \t\t\t\tif (i != 0)\n  \t\t\t\t\tl += insertSpaces(spacing-Math.ceil(digits(this.triangle[r][i],base)/2));\n  \t\t\t\tl += this.triangle[r][i].toString(base);\n  \t\t\t\tif (i < this.triangle[r].length-1)\n  \t\t\t\t\tl += insertSpaces(spacing-Math.floor(digits(this.triangle[r][i],base)/2));\n  \t\t\t}\n  \t\t\tprint(l);\n  \t\t}\n  \t}\n  }\n  // Display 4 row triangle in base 10\n  var tri = new pascalTriangle(4);\n  tri.print();\n  // Display 8 row triangle in base 16\n  tri = new pascalTriangle(8);\n  tri.print(16);(function (n) {\n      'use strict';\n      // A Pascal triangle of n rows\n      // pascal :: Int -> [[Int]]\n      function pascal(n) {\n          return range(1, n - 1)\n              .reduce(function (a) {\n                  var lstPreviousRow = a.slice(-1)[0];\n                  return a\n                      .concat(\n                          [zipWith(\n                              function (a, b) {\n                                  return a + b\n                              }, \n                              [0].concat(lstPreviousRow),\n                              lstPreviousRow.concat(0)\n                          )]\n                      );\n              }, [[1]]);\n      }\n      // GENERIC FUNCTIONS\n      // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n      function zipWith(f, xs, ys) {\n          return xs.length === ys.length ? (\n              xs.map(function (x, i) {\n                  return f(x, ys[i]);\n              })\n          ) : undefined;\n      }\n      // range :: Int -> Int -> [Int]\n      function range(m, n) {\n          return Array.apply(null, Array(n - m + 1))\n              .map(function (x, i) {\n                  return m + i;\n              });\n      }\n      // TEST\n      var lstTriangle = pascal(n);\n      // FORMAT OUTPUT AS WIKI TABLE\n      // [[a]] -> bool -> s -> s\n      function wikiTable(lstRows, blnHeaderRow, strStyle) {\n          return '{| class=\"wikitable\" ' + (\n                  strStyle ? 'style=\"' + strStyle + '\"' : ''\n              ) + lstRows.map(function (lstRow, iRow) {\n                  var strDelim = ((blnHeaderRow && !iRow) ? '!' : '|');\n                  return '\\n|-\\n' + strDelim + ' ' + lstRow.map(function (\n                          v) {\n                          return typeof v === 'undefined' ? ' ' : v;\n                      })\n                      .join(' ' + strDelim + strDelim + ' ');\n              })\n              .join('') + '\\n|}';\n      }\n      var lstLastLine = lstTriangle.slice(-1)[0],\n          lngBase = (lstLastLine.length * 2) - 1,\n          nWidth = lstLastLine.reduce(function (a, x) {\n              var d = x.toString()\n                  .length;\n              return d > a ? d : a;\n          }, 1) * lngBase;\n      return [\n      wikiTable(\n              lstTriangle.map(function (lst) {\n                  return lst.join(';;')\n                      .split(';');\n              })\n              .map(function (line, i) {\n                  var lstPad = Array((lngBase - line.length) / 2);\n                  return lstPad.concat(line)\n                      .concat(lstPad);\n              }),\n              false,\n              'text-align:center;width:' + nWidth + 'em;height:' + nWidth +\n              'em;table-layout:fixed;'\n      ),\n      JSON.stringify(lstTriangle)\n    ].join('\\n\\n');\n  })(7);[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]"],"uncertainCodeArray":[],"textArray":[]}