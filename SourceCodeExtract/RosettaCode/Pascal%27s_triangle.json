{"isSuccess":true,"url":"http://rosettacode.org/wiki/Pascal%27s_triangle","codeArray":["// Pascal's triangle object\nfunction pascalTriangle(rows) {\n    // Number of rows the triangle contains\n    this.rows = rows;\n    // The 2D array holding the rows of the triangle\n    this.triangle = new Array();\n    for (var r = 0; r < rows; r++) {\n        this.triangle[r] = new Array();\n        for (var i = 0; i <= r; i++) {\n            if (i == 0 || i == r)\n                this.triangle[r][i] = 1;\n            else\n                this.triangle[r][i] = this.triangle[r - 1][i - 1] + this.triangle[r - 1][i];\n        }\n    }\n    // Method to print the triangle\n    this.print = function(base) {\n        if (!base)\n            base = 10;\n        // Private method to calculate digits in number\n        var digits = function(n, b) {\n                var d = 0;\n                while (n >= 1) {\n                    d++;\n                    n /= b;\n                }\n                return d;\n            }\n            // Calculate max spaces needed\n        var spacing = digits(this.triangle[this.rows - 1][Math.round(this.rows / 2)], base);\n        // Private method to add spacing between numbers\n        var insertSpaces = function(s) {\n                var buf = \"\";\n                while (s > 0) {\n                    s--;\n                    buf += \" \";\n                }\n                return buf;\n            }\n            // Print the triangle line by line\n        for (var r = 0; r < this.triangle.length; r++) {\n            var l = \"\";\n            for (var s = 0; s < Math.round(this.rows - 1 - r); s++) {\n                l += insertSpaces(spacing);\n            }\n            for (var i = 0; i < this.triangle[r].length; i++) {\n                if (i != 0)\n                    l += insertSpaces(spacing - Math.ceil(digits(this.triangle[r][i], base) / 2));\n                l += this.triangle[r][i].toString(base);\n                if (i < this.triangle[r].length - 1)\n                    l += insertSpaces(spacing - Math.floor(digits(this.triangle[r][i], base) / 2));\n            }\n            print(l);\n        }\n    }\n}\n// Display 4 row triangle in base 10\nvar tri = new pascalTriangle(4);\ntri.print();\n// Display 8 row triangle in base 16\ntri = new pascalTriangle(8);\ntri.print(16);","(function(n) {\n    'use strict';\n    // A Pascal triangle of n rows\n    // pascal :: Int -> [[Int]]\n    function pascal(n) {\n        return range(1, n - 1)\n            .reduce(function(a) {\n                var lstPreviousRow = a.slice(-1)[0];\n                return a\n                    .concat(\n                        [zipWith(\n                            function(a, b) {\n                                return a + b\n                            }, [0].concat(lstPreviousRow),\n                            lstPreviousRow.concat(0)\n                        )]\n                    );\n            }, [\n                [1]\n            ]);\n    }\n    // GENERIC FUNCTIONS\n    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\n    function zipWith(f, xs, ys) {\n        return xs.length === ys.length ? (\n            xs.map(function(x, i) {\n                return f(x, ys[i]);\n            })\n        ) : undefined;\n    }\n    // range :: Int -> Int -> [Int]\n    function range(m, n) {\n        return Array.apply(null, Array(n - m + 1))\n            .map(function(x, i) {\n                return m + i;\n            });\n    }\n    // TEST\n    var lstTriangle = pascal(n);\n    // FORMAT OUTPUT AS WIKI TABLE\n    // [[a]] -> bool -> s -> s\n    function wikiTable(lstRows, blnHeaderRow, strStyle) {\n        return '{| class=\"wikitable\" ' + (\n                strStyle ? 'style=\"' + strStyle + '\"' : ''\n            ) + lstRows.map(function(lstRow, iRow) {\n                var strDelim = ((blnHeaderRow && !iRow) ? '!' : '|');\n                return '\\n|-\\n' + strDelim + ' ' + lstRow.map(function(\n                        v) {\n                        return typeof v === 'undefined' ? ' ' : v;\n                    })\n                    .join(' ' + strDelim + strDelim + ' ');\n            })\n            .join('') + '\\n|}';\n    }\n    var lstLastLine = lstTriangle.slice(-1)[0],\n        lngBase = (lstLastLine.length * 2) - 1,\n        nWidth = lstLastLine.reduce(function(a, x) {\n            var d = x.toString()\n                .length;\n            return d > a ? d : a;\n        }, 1) * lngBase;\n    return [\n        wikiTable(\n            lstTriangle.map(function(lst) {\n                return lst.join(';;')\n                    .split(';');\n            })\n            .map(function(line, i) {\n                var lstPad = Array((lngBase - line.length) / 2);\n                return lstPad.concat(line)\n                    .concat(lstPad);\n            }),\n            false,\n            'text-align:center;width:' + nWidth + 'em;height:' + nWidth +\n            'em;table-layout:fixed;'\n        ),\n        JSON.stringify(lstTriangle)\n    ].join('\\n\\n');\n})(7);","[\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1],\n    [1, 5, 10, 10, 5, 1],\n    [1, 6, 15, 20, 15, 6, 1]\n]"],"uncertainCodeArray":[],"textArray":[]}