{"isSuccess":true,"url":"http://rosettacode.org//wiki/Four_bit_adder","codeArray":[" function acceptedBinFormat(bin) {\n      if (bin == 1 || bin === 0 || bin === '0')\n          return true;\n      else\n          return bin;\n  }\n  function arePseudoBin() {\n      var args = [].slice.call(arguments), len = args.length;\n      while(len--)\n          if (acceptedBinFormat(args[len]) !== true)\n              throw new Error('argument must be 0, \\'0\\', 1, or \\'1\\', argument ' + len + ' was ' + args[len]);\n      return true;\n  }\n  // basic building blocks allowed by the rules are ~, &, and |, we'll fake these\n  // in a way that makes what they do (at least when you use them) more obvious \n  // than the other available options do.\n  function not(a) {\n      if (arePseudoBin(a))\n          return a == 1 ? 0 : 1;\n  }\n  function and(a, b) {\n      if (arePseudoBin(a, b))\n          return a + b < 2 ? 0 : 1;\n  }\n  function nand(a, b) {\n      if (arePseudoBin(a, b))\n          return not(and(a, b));\n  }\n  function or(a, b) {\n      if (arePseudoBin(a, b))\n          return nand(nand(a,a), nand(b,b));\n  }\n  function xor(a, b) {\n      if (arePseudoBin(a, b))\n          return nand(nand(nand(a,b), a), nand(nand(a,b), b));\n  }\n  function halfAdder(a, b) {\n      if (arePseudoBin(a, b))\n          return { carry: and(a, b), sum: xor(a, b) };\n  }\n  function fullAdder(a, b, c) {\n      if (arePseudoBin(a, b, c)) {\n          var h0 = halfAdder(a, b), \n              h1 = halfAdder(h0.sum, c);\n          return {carry: or(h0.carry, h1.carry), sum: h1.sum };\n      }\n  }\n  function fourBitAdder(a, b) {\n      if (typeof a.length == 'undefined' || typeof b.length == 'undefined')\n          throw new Error('bad values');\n      // not sure if the rules allow this, but we need to pad the values \n      // if they're too short and trim them if they're too long\n      var inA = Array(4), \n          inB = Array(4), \n          out = Array(4), \n          i = 4, \n          pass;\n      while (i--) {\n          inA[i] = a[i] != 1 ? 0 : 1;\n          inB[i] = b[i] != 1 ? 0 : 1;\n      }\n      // now we can start adding... I'd prefer to do this in a loop, \n      // but that wouldn't be \"connecting the other 'constructive blocks', \n      // in turn made of 'simpler' and 'smaller' ones\"\n      pass = halfAdder(inA[3], inB[3]);\n      out[3] = pass.sum;\n      pass = fullAdder(inA[2], inB[2], pass.carry);\n      out[2] = pass.sum;\n      pass = fullAdder(inA[1], inB[1], pass.carry);\n      out[1] = pass.sum;\n      pass = fullAdder(inA[0], inB[0], pass.carry);\n      out[0] = pass.sum;\n      return out.join('');\n  }\n   fourBitAdder('1010', '0101'); // 1111 (15) \n  // run this in your browsers console\n  var outer = inner = 16, a, b;\n  while(outer--) {\n      a = (8|outer).toString(2);\n      while(inner--) {\n          b = (8|inner).toString(2);\n          console.log(a + ' + ' + b + ' = ' + fourBitAdder(a, b));\n      }\n      inner = outer;\n  }"],"uncertainCodeArray":[],"textArray":[]}