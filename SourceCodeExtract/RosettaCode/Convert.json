{"isSuccess":true,"url":"http://rosettacode.org//wiki/Non-decimal_radices/Convert","codeArray":["k = 26\n  s = k.toString(16) //gives 1a\n  i = parseInt('1a',16) //gives 26\n  //optional special case for hex:\n  i = +('0x'+s) //hexadecimal base 16, if s='1a' then i=26. \n  var baselist = \"0123456789abcdefghijklmnopqrstuvwxyz\", listbase = [];\n  for(var i = 0; i < baselist.length; i++) listbase[baselist[i]] = i; // Generate baselist reverse\n  function basechange(snumber, frombase, tobase)\n  {\n   var i, t, to = new Array(Math.ceil(snumber.length * Math.log(frombase) / Math.log(tobase))), accumulator;\n   if(1 < frombase < baselist.length || 1 < tobase < baselist.length) console.error(\"Invalid or unsupported base!\");\n   while(snumber[0] == baselist[0] && snumber.length > 1) snumber = snumber.substr(1); // Remove leading zeros character\n   console.log(\"Number is\", snumber, \"in base\", frombase, \"to base\", tobase, \"result should be\",\n               parseInt(snumber, frombase).toString(tobase));\n   for(i = snumber.length - 1, inexp = 1; i > -1; i--, inexp *= frombase)\n    for(accumulator = listbase[snumber[i]] * inexp, t = to.length - 1; accumulator > 0 || t >= 0; t--)\n    {\n     accumulator += listbase[to[t] || 0];\n     to[t] = baselist[(accumulator % tobase)  || 0];\n     accumulator = Math.floor(accumulator / tobase);\n    }\n   return to.join('');\n  }\n  console.log(\"Result:\", basechange(\"zzzzzzzzzz\", 36, 10)); \n  // Tom Wu jsbn.js http://www-cs-students.stanford.edu/~tjw/jsbn/\n  var baselist = \"0123456789abcdefghijklmnopqrstuvwxyz\", listbase = [];\n  for(var i = 0; i < baselist.length; i++) listbase[baselist[i]] = i; // Generate baselist reverse\n  function baseconvert(snumber, frombase, tobase) // String number in base X to string number in base Y, arbitrary length, base\n  {\n   var i, t, to, accum = new BigInteger(), inexp = new BigInteger('1', 10), tb = new BigInteger(),\n       fb = new BigInteger(), tmp = new BigInteger();\n   console.log(\"Number is\", snumber, \"in base\", frombase, \"to base\", tobase, \"result should be\",\n               frombase < 37 && tobase < 37 ? parseInt(snumber, frombase).toString(tobase) : 'too large');\n   while(snumber[0] == baselist[0] && snumber.length > 1) snumber = snumber.substr(1); // Remove leading zeros\n   tb.fromInt(tobase);\n   fb.fromInt(frombase);\n   for(i = snumber.length - 1, to = new Array(Math.ceil(snumber.length * Math.log(frombase) / Math.log(tobase))); i > -1; i--)\n   {\n    accum = inexp.clone();\n    accum.dMultiply(listbase[snumber[i]]);\n    for(t = to.length - 1; accum.compareTo(BigInteger.ZERO) > 0 || t >= 0; t--)\n    {\n     tmp.fromInt(listbase[to[t]] || 0);\n     accum = accum.add(tmp);\n     to[t] = baselist[accum.mod(tb).intValue()];\n     accum = accum.divide(tb);\n    }\n    inexp = inexp.multiply(fb);\n   }\n   while(to[0] == baselist[0] && to.length > 1) to = to.slice(1); // Remove leading zeros\n   return to.join('');\n  }"],"uncertainCodeArray":[],"textArray":[]}