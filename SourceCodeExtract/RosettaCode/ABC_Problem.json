{"isSuccess":true,"url":"http://rosettacode.org//wiki/ABC_Problem","codeArray":["var blocks = \"BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM\";\n\nfunction CheckWord(blocks, word) {\n    // Makes sure that word only contains letters.\n    if (word !== /([a-z]*)/i.exec(word)[1]) return false;\n    // Loops through each character to see if a block exists.\n    for (var i = 0; i < word.length; ++i) {\n        // Gets the ith character.\n        var letter = word.charAt(i);\n        // Stores the length of the blocks to determine if a block was removed.\n        var length = blocks.length;\n        // The regexp gets constructed by eval to allow more browsers to use the function.\n        var reg = eval(\"/([a-z]\" + letter + \"|\" + letter + \"[a-z])/i\");\n        // This does the same as above, but some browsers do not support...\n        //var reg = new RegExp(\"([a-z]\"+letter+\"|\"+letter+\"[a-z])\", \"i\");\n        // Removes all occurrences of the match. \n        blocks = blocks.replace(reg, \"\");\n        // If the length did not change then a block did not exist.\n        if (blocks.length === length) return false;\n    }\n    // If every character has passed then return true.\n    return true;\n};\nvar words = [\n    \"A\",\n    \"BARK\",\n    \"BOOK\",\n    \"TREAT\",\n    \"COMMON\",\n    \"SQUAD\",\n    \"CONFUSE\"\n];\nfor (var i = 0; i < words.length; ++i)\n    console.log(words[i] + \": \" + CheckWord(blocks, words[i]));","(function(strWords) {\n    var strBlocks =\n        'BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM',\n        blocks = strBlocks.split(' ');\n\n    function abc(lstBlocks, strWord) {\n        var lngChars = strWord.length;\n        if (!lngChars) return [];\n        var b = lstBlocks[0],\n            c = strWord[0];\n        return chain(lstBlocks, function(b) {\n            return (b.indexOf(c.toUpperCase()) !== -1) ? [\n                (b + ' ').concat(\n                    abc(removed(b, lstBlocks), strWord.slice(1)))\n            ] : [];\n        })\n    }\n    // Monadic bind (chain) for lists\n    function chain(xs, f) {\n        return [].concat.apply([], xs.map(f));\n    }\n    // a -> [a] -> [a]\n    function removed(x, xs) {\n        var h = xs.length ? xs[0] : null,\n            t = h ? xs.slice(1) : [];\n        return h ? (\n            h === x ? t : [h].concat(removed(x, t))\n        ) : [];\n    }\n\n    function solution(strWord) {\n        var strAttempt = abc(blocks, strWord)[0].split(',')[0];\n        // two chars per block plus one space -> 3\n        return strWord + ((strAttempt.length === strWord.length * 3) ?\n            ' -> ' + strAttempt : ': [no solution]');\n    }\n    return strWords.split(' ').map(solution).join('\\n');\n})('A bark BooK TReAT COMMON squAD conFUSE');","A - > NA\nbark - > BO NA RE XK\nBooK: [no solution]\nTReAT - > GT RE ER NA TG\nCOMMON: [no solution]\nsquAD - > FS DQ HU NA QD\nconFUSE - > CP BO NA FS HU FS RE","let characters = \"BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM\";\nlet blocks = characters.split(\" \").map(pair => pair.split(\"\"));\n\nfunction isWordPossible(word) {\n    var letters = [...word.toUpperCase()];\n    var length = letters.length;\n    var copy = new Set(blocks);\n    for (let letter of letters) {\n        for (let block of copy) {\n            let index = block.indexOf(letter);\n            if (index !== -1) {\n                length--;\n                copy.delete(block);\n                break;\n            }\n        }\n    }\n    return !length;\n}\n[\n    \"A\",\n    \"BARK\",\n    \"BOOK\",\n    \"TREAT\",\n    \"COMMON\",\n    \"SQUAD\",\n    \"CONFUSE\"\n].forEach(word => console.log(`${word}: ${isWordPossible(word)}`));"],"uncertainCodeArray":[],"textArray":[]}