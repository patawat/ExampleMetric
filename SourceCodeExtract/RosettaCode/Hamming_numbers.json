{"isSuccess":true,"url":"http://rosettacode.org//wiki/Hamming_numbers","codeArray":["function hamming() {\n    var queues = {\n        2: [],\n        3: [],\n        5: []\n    };\n    var base;\n    var next_ham = 1;\n    while (true) {\n        yield next_ham;\n        for (base in queues) {\n            queues[base].push(next_ham * base)\n        }\n        next_ham = [queue[0]\n            for each(queue in queues)\n        ].reduce(function(min, val) {\n            return Math.min(min, val)\n        });\n        for (base in queues) {\n            if (queues[base][0] == next_ham) queues[base].shift()\n        }\n    }\n}\nvar ham = hamming();\nvar first20 = [],\n    i = 1;\nfor (; i <= 20; i++)\n    first20.push(ham.next());\nprint(first20.join(', '));\nprint('...');\nfor (; i <= 1690; i++)\n    ham.next();\nprint(i + \" => \" + ham.next());","< /script> <\nscript src = \"http://peterolson.github.com/BigInteger.js/BigInteger.min.js\" > < /script> <\n    script type = \"text/javascript\" >\n    var _primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];\n\nfunction log(text) {\n    $('#main').append(text + \"\\n\");\n}\n\nfunction big(exponents) {\n    var i, e, val = bigInt.one;\n    for (i = 0; i < exponents.length; i++)\n        for (e = 0; e < exponents[i]; e++)\n            val = val.times(_primes[i]);\n    return val.toString();\n}\n\nfunction hamming(n, nprimes) {\n    var i, iter, p, q, min, equal, x;\n    var hammings = new Array(n); // array of hamming #s we generate\n    hammings[0] = new Array(nprimes);\n    for (p = 0; p < nprimes; p++) {\n        hammings[0][p] = 0;\n    }\n    var hammlogs = new Array(n); // log values for above\n    hammlogs[0] = 0;\n    var primelogs = new Array(nprimes); // pre-calculated prime log values\n    var listlogs = new Array(nprimes); // log values of list heads\n    for (p = 0; p < nprimes; p++) {\n        primelogs[p] = listlogs[p] = Math.log(_primes[p]);\n    }\n    var indexes = new Array(nprimes); // intermediate hamming values as indexes into hammings\n    for (p = 0; p < nprimes; p++) {\n        indexes[p] = 0;\n    }\n    var listheads = new Array(nprimes); // intermediate hamming list heads\n    for (p = 0; p < nprimes; p++) {\n        listheads[p] = new Array(nprimes);\n        for (q = 0; q < nprimes; q++) {\n            listheads[p][q] = 0;\n        }\n        listheads[p][p] = 1;\n    }\n    for (iter = 1; iter < n; iter++) {\n        min = 0;\n        for (p = 1; p < nprimes; p++)\n            if (listlogs[p] < listlogs[min])\n                min = p;\n        hammlogs[iter] = listlogs[min]; // that's the next hamming number\n        hammings[iter] = listheads[min].slice();\n        for (p = 0; p < nprimes; p++) { // update each list head if it matches new value\n            equal = true; // test each exponent to see if number matches\n            for (i = 0; i < nprimes; i++) {\n                if (hammings[iter][i] != listheads[p][i]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) { // if it matches...\n                x = ++indexes[p]; // set index to next hamming number\n                listheads[p] = hammings[x].slice(); // copy hamming number\n                listheads[p][p] += 1; // increment exponent = mult by prime\n                listlogs[p] = hammlogs[x] + primelogs[p]; // add log(prime) to log(value) = mult by prime\n            }\n        }\n    }\n    return hammings[n - 1];\n}\n$(document).ready(function() {\n    var i, nprimes;\n    var t = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1691, 1000000];\n    for (nprimes = 3; nprimes <= 4; nprimes++) {\n        var start = new Date();\n        log('<h1>' + _primes[nprimes - 1] + '-Smooth:' + '</h1>');\n        log('<table>');\n        for (i = 0; i < t.length; i++)\n            log('<tr>' + '<td>' + t[i] + ':' + '</td><td>' + big(hamming(t[i], nprimes)) + '</td>');\n        var end = new Date();\n        log('<tr>' + '<td>' + 'Elapsed time:' + '</td><td>' + (end - start) / 1000 + ' seconds' + '</td>');\n        log('</table>');\n    }\n});"],"uncertainCodeArray":[],"textArray":[]}