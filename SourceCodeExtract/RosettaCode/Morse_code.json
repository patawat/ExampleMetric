{"isSuccess":true,"url":"http://rosettacode.org//wiki/Morse_code","codeArray":[" var globalAudioContext = new webkitAudioContext();\n  function morsecode(text, unit, freq) {\n  \t'use strict';\n  \t// defaults\n  \tunit = unit ? unit : 0.05;\n  \tfreq = freq ? freq : 700;\n  \tvar cont = globalAudioContext;\n  \tvar time = cont.currentTime;\n  \t// morsecode\n  \tvar code = {\n  \t\ta: '._',    b: '_...',  c: '_._.',  d: '_..',   e: '.',     f: '.._.',\n  \t\tg: '__.',   h: '....',  i: '..',    j: '.___',  k: '_._',   l: '._..',\n  \t\tm: '__',    n: '_.',    o: '___',   p: '.__.',  q: '__._',  r: '._.',\n  \t\ts: '...',   t: '_',     u: '.._',   v: '..._',  w: '.__',   x: '_.._',\n  \t\ty: '_.__',  z: '__..',  0: '_____', 1: '.____', 2: '..___', 3: '...__',\n  \t\t4: '...._', 5: '.....', 6: '_....', 7: '__...', 8: '___..', 9: '____.'\n  \t};\n  \t// generate code for text\n  \tfunction makecode(data) {\n  \t\tfor (var i = 0; i <= data.length; i ++) {\n  \t\t\tvar codedata = data.substr(i, 1).toLowerCase();\n  \t\t\tcodedata = code[codedata];\n  \t\t\t// recognised character\n  \t\t\tif (codedata !== undefined) {\n  \t\t\t\tmaketime(codedata);\n  \t\t\t}\n  \t\t\t// unrecognised character\n  \t\t\telse {\n  \t\t\t\ttime += unit * 7;\n  \t\t\t}\n  \t\t}\n  \t}\n  \t// generate time for code\n  \tfunction maketime(data) {\n  \t\tfor (var i = 0; i <= data.length; i ++) {\n  \t\t\tvar timedata = data.substr(i, 1);\n  \t\t\ttimedata = (timedata === '.') ? 1 : (timedata === '_') ? 3 : 0;\n  \t\t\ttimedata *= unit;\n  \t\t\tif (timedata > 0) {\n  \t\t\t\tmaketone(timedata);\n  \t\t\t\ttime += timedata;\n  \t\t\t\t// tone gap\n  \t\t\t\ttime += unit * 1;\n  \t\t\t}\n  \t\t}\n  \t\t// char gap\n  \t\ttime += unit * 2;\n  \t}\n  \t// generate tone for time\n  \tfunction maketone(data) {\n  \t\tvar start = time;\n  \t\tvar stop = time + data;\n  \t\t// filter: envelope the tone slightly\n  \t\tgain.gain.linearRampToValueAtTime(0, start);\n  \t\tgain.gain.linearRampToValueAtTime(1, start + (unit / 8));\n  \t\tgain.gain.linearRampToValueAtTime(1, stop - (unit / 16));\n  \t\tgain.gain.linearRampToValueAtTime(0, stop);\n  \t}\n  \t// create: oscillator, gain, destination\n  \tvar osci = cont.createOscillator();\n  \tosci.frequency.value = freq;\n  \tvar gain = cont.createGainNode();\n  \tgain.gain.value = 0;\n  \tvar dest = cont.destination;\n  \t// connect: oscillator -> gain -> destination\n  \tosci.connect(gain);\n  \tgain.connect(dest);\n  \t// start oscillator\n  \tosci.start(time);\n  \t// begin encoding: text -> code -> time -> tone\n  \tmakecode(text);\n  \t// return web audio context for reuse / control\n  \treturn cont;\n  }\n  morsecode('Hello World');"],"uncertainCodeArray":[],"textArray":[]}