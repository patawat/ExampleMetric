{"isSuccess":true,"url":"http://rosettacode.org//wiki/Reflection/List_methods","codeArray":["// Sample classes for reflection\nfunction Super(name) {\n    this.name = name;\n    this.superOwn = function() {\n        return 'super owned';\n    };\n}\nSuper.prototype = {\n    constructor: Super\n    className: 'super',\n    toString: function() {\n        return \"Super(\" + this.name + \")\";\n    },\n    doSup: function() {\n        return 'did super stuff';\n    }\n}\n\nfunction Sub() {\n    Object.getPrototypeOf(this).constructor.apply(this, arguments);\n    this.rest = [].slice.call(arguments, 1);\n    this.subOwn = function() {\n        return 'sub owned';\n    };\n}\nSub.prototype = Object.assign(\n    new Super('prototype'), {\n        constructor: Sub\n        className: 'sub',\n        toString: function() {\n            return \"Sub(\" + this.name + \")\";\n        },\n        doSub: function() {\n            return 'did sub stuff';\n        }\n    });\nObject.defineProperty(Sub.prototype, 'shush', {\n    value: function() {\n        return ' non-enumerable';\n    },\n    enumerable: false // the default\n});\nvar sup = new Super('sup'),\n    sub = new Sub('sub', 0, 'I', 'two');\nObject.defineProperty(sub, 'quiet', {\n    value: function() {\n        return 'sub owned non-enumerable';\n    },\n    enumerable: false\n});\n// get enumerable methods on an object and its ancestors\nfunction get_method_names(obj) {\n    var methods = [];\n    for (var p in obj) {\n        if (typeof obj[p] == 'function') {\n            methods.push(p);\n        }\n    }\n    return methods;\n}\nget_method_names(sub);\n//[\"subOwn\", \"superOwn\", \"toString\", \"doSub\", \"doSup\"]\n// get enumerable properties on an object and its ancestors\nfunction get_property_names(obj) {\n    var properties = [];\n    for (var p in obj) {\n        properties.push(p);\n    }\n    return properties;\n}\n// alternate way to get enumerable method names on an object and its ancestors\nfunction get_method_names(obj) {\n    return get_property_names(obj)\n        .filter(function(p) {\n            return typeof obj[p] == 'function';\n        });\n}\nget_method_names(sub);\n//[\"subOwn\", \"superOwn\", \"toString\", \"doSub\", \"doSup\"]\n// get enumerable & non-enumerable method names set directly on an object\nObject.getOwnPropertyNames(sub)\n    .filter(function(p) {\n        return typeof sub[p] == 'function';\n    })\n    //[\"subOwn\", \"shhh\"]\n    // get enumerable method names set directly on an object\nObject.keys(sub)\n    .filter(function(p) {\n        return typeof sub[p] == 'function';\n    })\n    //[\"subOwn\"]\n    // get enumerable method names & values set directly on an object\nObject.entries(sub)\n    .filter(function(p) {\n        return typeof p[1] == 'function';\n    })\n    //[[\"subOwn\", function () {...}]]"],"uncertainCodeArray":[],"textArray":[]}