{"isSuccess":true,"url":"http://rosettacode.org//wiki/Matrix_multiplication","codeArray":["// returns a new matrix\n  Matrix.prototype.mult = function(other) {\n      if (this.width != other.height) {\n          throw \"error: incompatible sizes\";\n      }\n      var result = [];\n      for (var i = 0; i < this.height; i++) {\n          result[i] = [];\n          for (var j = 0; j < other.width; j++) {\n              var sum = 0;\n              for (var k = 0; k < this.width; k++) {\n                  sum += this.mtx[i][k] * other.mtx[k][j];\n              }\n              result[i][j] = sum;\n          }\n      }\n      return new Matrix(result); \n  }\n  var a = new Matrix([[1,2],[3,4]])\n  var b = new Matrix([[-3,-8,3],[-2,1,4]]);\n  print(a.mult(b));(function () {\n      'use strict';\n      // matrixMultiply:: [[n]] -> [[n]] -> [[n]] \n      function matrixMultiply(a, b) {\n          var bCols = transpose(b);\n          return a.map(function (aRow) {\n              return bCols.map(function (bCol) {\n                  return dotProduct(aRow, bCol);\n              });\n          });\n      }\n      // [[n]] -> [[n]] -> [[n]]\n      function dotProduct(xs, ys) {\n          return sum(zipWith(product, xs, ys));\n      }\n      return matrixMultiply(\n          [[-1,  1,  4],\n           [ 6, -4,  2],\n           [-3,  5,  0],\n           [ 3,  7, -2]],\n          [[-1,  1,  4,  8],\n           [ 6,  9, 10,  2],\n           [11, -4,  5, -3]]\n      );\n      // --> [[51, -8, 26, -18], [-8, -38, -6, 34], \n      //        [33, 42, 38, -14], [17, 74, 72, 44]]\n      // GENERIC LIBRARY FUNCTIONS\n      // (a -> b -> c) -> [a] -> [b] -> [c]\n      function zipWith(f, xs, ys) {\n          return xs.length === ys.length ? (\n              xs.map(function (x, i) {\n                  return f(x, ys[i]);\n              })\n          ) : undefined;\n      }\n      // [[a]] -> [[a]]\n      function transpose(lst) {\n          return lst[0].map(function (_, iCol) {\n              return lst.map(function (row) {\n                  return row[iCol];\n              });\n          });\n      }\n      // sum :: (Num a) => [a] -> a\n      function sum(xs) {\n          return xs.reduce(function (a, x) {\n              return a + x;\n          }, 0);\n      }\n      // product :: n -> n -> n\n      function product(a, b) {\n          return a * b;\n      }\n  })();"],"uncertainCodeArray":[],"textArray":[]}