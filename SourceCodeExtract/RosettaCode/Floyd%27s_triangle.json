{"isSuccess":true,"url":"http://rosettacode.org/wiki/Floyd%27s_triangle","codeArray":["// Floyd triangles of 5 and 14 rows\n  // right-aligned monospaced columns (nMargin allows for extra spacing)\n  // () --> s\n  function main() {\n      // minimum space between numbers - adjust for visual preference\n      var nMargin = 1;\n      // Formatted strings for Floyd's triangles of 5 and 14 rows\n      return (function (lstN) {\n          return lstN.map(function (nFloydRows) {\n              var lstRows = floydIntegerLists(nFloydRows),\n                  iLast = nFloydRows - 1;\n              return colsSpacedRight(\n                  lstRows,\n                  // Minimum space required per number cell\n                  // nMargin more than the width of the final number\n                  lstRows[iLast][iLast].toString().length + nMargin\n              )\n          }).join('\\n\\n');\n      })([5, 14]);\n  }\n  // n Floyd's triangle rows\n  // n --> [[n]]\n  function floydIntegerLists(nRows) {\n      // Full integer list folded into list of rows\n      // [n] --> [[n]]\n      return (function triangleNumbers(lstInt, startWidth) {\n          var n = startWidth || 1;\n          return n > lstInt.length ? [] : [lstInt.slice(0, n)].concat(\n              triangleNumbers(lstInt.slice(n), n + 1)\n          )\n      })(\n          range(\n              1,\n              Math.floor(\n                  (nRows * nRows) / 2\n              ) + Math.ceil(\n                  nRows / 2\n              )\n          )\n      );\n  }\n  // list of list of numbers --> lines of fixed right-aligned col width\n  // [[n]] --> s\n  function colsSpacedRight(lstLines, nColWidth) {\n      return lstLines.reduce(\n          function (s, line) {\n              return s + line.map(function (n) {\n                  return rightAligned(n, nColWidth)\n              }).join('') + '\\n';\n          }, ''\n      )\n  }\n  // range(1, 20) --> [1..20]\n  function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(\n          function (x, i) {\n              return m + i;\n          }\n      );\n  }\n  // Integer as right-padded string of given width\n  // n --> n --> s\n  function rightAligned(n, width) {\n      var strN = n.toString();\n      return Array(width - strN.length + 1).join(' ') + strN;\n  }\n  console.log( // if the context is a browser\n      main()\n  );#!/usr/bin/env js\n  function main() {\n      print('Floyd 5:');\n      floyd(5);\n      print('\\nFloyd 14:');\n      floyd(14);\n  }\n  function padLeft(s, w) {\n      for (s = String(s); s.length < w; s = ' ' + s);\n      return s;\n  }\n  function floyd(nRows) {\n      var lowerLeft = nRows * (nRows - 1) / 2 + 1;\n      var lowerRight = nRows * (nRows + 1) / 2;\n      var colWidths = [];\n      for (var col = lowerLeft; col <= lowerRight; col++) {\n          colWidths.push(String(col).length);\n      }\n      var  num = 1;\n      for (var row = 0; row < nRows; row++) {\n          var line = [];\n          for (var col = 0; col <= row; col++, num++) {\n              line.push(padLeft(num, colWidths[col]));\n          }\n          print(line.join(' '));\n      }\n  }\n  main();"],"uncertainCodeArray":[],"textArray":[]}