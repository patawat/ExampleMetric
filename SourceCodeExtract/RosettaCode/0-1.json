{"isSuccess":true,"url":"http://rosettacode.org//wiki/Knapsack_problem/0-1","codeArray":["/*global portviz:false, _:false */\n  /*\n   * 0-1 knapsack solution, recursive, memoized, approximate.\n   *\n   * credits:\n   *\n   * the Go implementation here:\n   *   http://rosettacode.org/mw/index.php?title=Knapsack_problem/0-1\n   *\n   * approximation details here:\n   *   http://math.mit.edu/~goemans/18434S06/knapsack-katherine.pdf\n   */\n  portviz.knapsack = {};\n  (function() {\n    this.combiner = function(items, weightfn, valuefn) {\n      // approximation guarantees result >= (1-e) * optimal\n      var _epsilon = 0.01;\n      var _p = _.max(_.map(items,valuefn));\n      var _k = _epsilon * _p / items.length;\n      var _memo = (function(){\n        var _mem = {};\n        var _key = function(i, w) {\n          return i + '::' + w;\n        };\n        return {\n          get: function(i, w) {\n            return _mem[_key(i,w)];\n          },\n          put: function(i, w, r) {\n            _mem[_key(i,w)]=r;\n            return r;\n          }\n        };\n      })();\n      var _m = function(i, w) {\n        i = Math.round(i);\n        w = Math.round(w);\n        if (i < 0 || w === 0) {\n          // empty base case\n          return {items: [], totalWeight: 0, totalValue: 0};\n        }\n        var mm = _memo.get(i,w);\n        if (!_.isUndefined(mm)) {\n          return mm;\n        }\n        var item = items[i];\n        if (weightfn(item) > w) {\n          //item does not fit, try the next item\n          return _memo.put(i, w, _m(i-1, w));\n        }\n        // this item could fit.\n        // are we better off excluding it?\n        var excluded = _m(i-1, w);\n        // or including it?\n        var included = _m(i-1, w - weightfn(item));\n        if (included.totalValue + Math.floor(valuefn(item)/_k) > excluded.totalValue) {\n          // better off including it\n          // make a copy of the list\n          var i1 = included.items.slice();\n          i1.push(item);\n          return _memo.put(i, w,\n            {items: i1,\n             totalWeight: included.totalWeight + weightfn(item),\n             totalValue: included.totalValue + Math.floor(valuefn(item)/_k)});\n        }\n        //better off excluding it\n        return _memo.put(i,w, excluded);\n      };\n      return {\n        /* one point */\n        one: function(maxweight) {\n          var scaled = _m(items.length - 1, maxweight);\n          return {\n            items: scaled.items,\n            totalWeight: scaled.totalWeight,\n            totalValue: scaled.totalValue * _k\n          };\n        },\n        /* the entire EF */\n        ef: function(maxweight, step) {\n          return _.map(_.range(0, maxweight+1, step), function(weight) {\n            var scaled = _m(items.length - 1, weight);\n            return {\n              items: scaled.items,\n              totalWeight: scaled.totalWeight,\n              totalValue: scaled.totalValue * _k\n            };\n          });\n        }\n      };\n    };\n  }).apply(portviz.knapsack);\n  /*global portviz:false, _:false */\n  /*\n   * after rosettacode.org/mw/index.php?title=Knapsack_problem/0-1\n   */\n  var allwants = [\n    {name:\"map\", weight:9, value: 150},\n    {name:\"compass\", weight:13, value: 35},\n    {name:\"water\", weight:153, value: 200},\n    {name:\"sandwich\", weight: 50, value: 160},\n    {name:\"glucose\", weight:15, value: 60},\n    {name:\"tin\", weight:68, value: 45},\n    {name:\"banana\", weight:27, value: 60},\n    {name:\"apple\", weight:39, value: 40},\n    {name:\"cheese\", weight:23, value: 30},\n    {name:\"beer\", weight:52, value: 10},\n    {name:\"suntan cream\", weight:11, value: 70},\n    {name:\"camera\", weight:32, value: 30},\n    {name:\"T-shirt\", weight:24, value: 15},\n    {name:\"trousers\", weight:48, value: 10},\n    {name:\"umbrella\", weight:73, value: 40},\n    {name:\"waterproof trousers\", weight:42, value: 70},\n    {name:\"waterproof overclothes\", weight:43, value: 75},\n    {name:\"note-case\", weight:22, value: 80},\n    {name:\"sunglasses\", weight:7, value: 20},\n    {name:\"towel\", weight:18, value: 12},\n    {name:\"socks\", weight:4, value: 50},\n    {name:\"book\", weight:30, value: 10}\n  ];\n  var near = function(actual, expected, tolerance) {\n    if (expected === 0 && actual === 0) return true;\n    if (expected === 0) {\n      return Math.abs(expected - actual) / actual < tolerance;\n    }\n    return Math.abs(expected - actual) / expected < tolerance;\n  };\n  test(\"one knapsack\", function() {\n    var combiner =\n      portviz.knapsack.combiner(allwants,\n        function(x){return x.weight;},\n        function(x){return x.value;});\n    var oneport = combiner.one(400);\n    ok(near(oneport.totalValue, 1030, 0.01), \"correct total value\");\n    ok(near(oneport.totalValue, 1030, 0.01), \"correct total value\");\n    equal(oneport.totalWeight, 396, \"correct total weight\");\n  });\n  test(\"frontier\", function() {\n    var combiner =\n      portviz.knapsack.combiner(allwants,\n        function(x){return x.weight;},\n        function(x){return x.value;});\n    var ef = combiner.ef(400, 1);\n    equal(ef.length, 401, \"401 because it includes the endpoints\");\n    ef = combiner.ef(400, 40);\n    equal(ef.length, 11, \"11 because it includes the endpoints\");\n    var expectedTotalValue = [\n      0,\n      330,\n      445,\n      590,\n      685,\n      755,\n      810,\n      860,\n      902,\n      960,\n      1030\n    ] ;\n    _.each(ef, function(element, index) {\n      // 15% error!  bleah!\n      ok(near(element.totalValue, expectedTotalValue[index], 0.15),\n        'actual ' + element.totalValue + ' expected ' + expectedTotalValue[index]);\n    });\n    deepEqual(_.pluck(ef, 'totalWeight'), [\n      0,\n      39,\n      74,\n      118,\n      158,\n      200,\n      236,\n      266,\n      316,\n      354,\n      396\n    ]);\n    deepEqual(_.map(ef, function(x){return x.items.length;}), [\n      0,\n      4,\n      6,\n      7,\n      9,\n      10,\n      10,\n      12,\n      14,\n      11,\n      12\n     ]);\n  });"],"uncertainCodeArray":[],"textArray":[]}