{"isSuccess":true,"url":"http://rosettacode.org//wiki/Combinations","codeArray":["function bitprint(u) {\n    var s=\"\";\n    for (var n=0; u; ++n, u>>=1)\n      if (u&1) s+=n+\" \";\n    return s;\n  }\n  function bitcount(u) {\n    for (var n=0; u; ++n, u=u&(u-1));\n    return n;\n  }\n  function comb(c,n) {\n    var s=[];\n    for (var u=0; u<1<<n; u++)\n      if (bitcount(u)==c)\n        s.push(bitprint(u))\n    return s.sort();\n  }\n  comb(3,5)function combinations(arr, k){\n      var i,\n      subI,\n      ret = [],\n      sub,\n      next;\n      for(i = 0; i < arr.length; i++){\n          if(k === 1){\n              ret.push( [ arr[i] ] );\n          }else{\n              sub = combinations(arr.slice(i+1, arr.length), k-1);\n              for(subI = 0; subI < sub.length; subI++ ){\n                  next = sub[subI];\n                  next.unshift(arr[i]);\n                  ret.push( next );\n              }\n          }\n      }\n      return ret;\n  }\n  combinations([0,1,2,3,4], 3); \n  // produces: [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]\n  combinations([\"Crosby\", \"Stills\", \"Nash\", \"Young\"], 3); \n  // produces: [[\"Crosby\", \"Stills\", \"Nash\"], [\"Crosby\", \"Stills\", \"Young\"], [\"Crosby\", \"Nash\", \"Young\"], [\"Stills\", \"Nash\", \"Young\"]]\n  Â (function () {\n    function comb(n, lst) {\n      if (!n) return [[]];\n      if (!lst.length) return [];\n      var x = lst[0],\n          xs = lst.slice(1);\n      return comb(n - 1, xs).map(function (t) {\n        return [x].concat(t);\n      }).concat(comb(n, xs));\n    }\n    // [m..n]\n    function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n    return comb(3, range(0, 4))\n      .map(function (x) {\n        return x.join(' ');\n      }).join('\\n');\n  })();(function (n) {\n    // n -> [a] -> [[a]]\n    function comb(n, lst) {\n      if (!n) return [[]];\n      if (!lst.length) return [];\n      var x = lst[0],\n        xs = lst.slice(1);\n      return comb(n - 1, xs).map(function (t) {\n        return [x].concat(t);\n      }).concat(comb(n, xs));\n    }\n    // f -> f\n    function memoized(fn) {\n      m = {};\n      return function (x) {\n        var args = [].slice.call(arguments),\n          strKey = args.join('-');\n        v = m[strKey];\n        if ('u' === (typeof v)[0])\n          m[strKey] = v = fn.apply(null, args);\n        return v;\n      }\n    }\n    // [m..n]\n    function range(m, n) {\n      return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n        return m + i;\n      });\n    }\n    var fnMemoized = memoized(comb),\n      lstRange = range(0, 4);\n    return fnMemoized(n, lstRange)\n    .map(function (x) {\n      return x.join(' ');\n    }).join('\\n');\n  })(3);0 1 2\n  0 1 3\n  0 1 4\n  0 2 3\n  0 2 4\n  0 3 4\n  1 2 3\n  1 2 4\n  1 3 4\n  2 3 4"],"uncertainCodeArray":[],"textArray":[]}