{"isSuccess":true,"url":"http://rosettacode.org//wiki/Search_a_list","codeArray":["var haystack = ['Zig', 'Zag', 'Wally', 'Ronald', 'Bush', 'Krusty', 'Charlie', 'Bush', 'Bozo']\n  var needles = ['Bush', 'Washington']\n  for (var i in needles) {\n      var found = false;\n      for (var j in haystack) {\n          if (haystack[j] == needles[i]) {\n              found = true;\n              break;\n          }\n      }\n      if (found)\n          print(needles[i] + \" appears at index \" + j + \" in the haystack\");\n      else\n          throw needles[i] + \" does not appear in the haystack\"\n  }for each (var needle in needles) {\n      var idx = haystack.indexOf(needle);\n      if (idx == -1)\n          throw needle + \" does not appear in the haystack\"\n      else\n          print(needle + \" appears at index \" + idx + \" in the haystack\");\n  }\n  // extra credit\n  for each (var elem in haystack) {\n      var first_idx = haystack.indexOf(elem);\n      var last_idx  = haystack.lastIndexOf(elem);\n      if (last_idx > first_idx) {\n          print(elem + \" last appears at index \" + last_idx + \" in the haystack\");\n          break\n      }\n  }(function () {\n    function findIndex(fnPredicate, list) {\n      for (var i = 0, lng = list.length; i < lng; i++) {\n        if (fnPredicate(list[i])) {\n          return i;\n        }\n      }\n      return Error(\"not found\");\n    };\n    // DEFINING A PARTICULAR TYPE OF SEARCH MATCH\n    function matchCaseInsensitive(s, t) {\n      return s.toLowerCase() === t.toLowerCase();\n    }\n    var lstHaystack = [\n      'Zig', 'Zag', 'Wally', 'Ronald', 'Bush',\n      'Krusty', 'Charlie', 'Bush', 'Bozo'\n    ],\n      lstReversed = lstHaystack.slice(0).reverse(),\n      iLast = lstHaystack.length - 1,\n      lstNeedles = ['bush', 'washington'];\n    return {\n      'first': lstNeedles.map(function (s) {\n        return [s, findIndex(function (t) {\n            return matchCaseInsensitive(s, t);\n          },\n          lstHaystack)];\n      }),\n      'last': lstNeedles.map(function (s) {\n        var varIndex = findIndex(function (t) {\n            return matchCaseInsensitive(s, t);\n          },\n          lstReversed);\n        return [\n          s,\n          typeof varIndex === 'number' ?\n            iLast - varIndex : varIndex\n        ];\n      })\n    }\n  })();{\n    \"first\": [\n      [\n        \"bush\",\n        4\n      ],\n      [\n        \"washington\",\n        \"Error: not found\"\n      ]\n    ],\n    \"last\": [\n      [\n        \"bush\",\n        7\n      ],\n      [\n        \"washington\",\n        \"Error: not found\"\n      ]\n    ]\n  }"],"uncertainCodeArray":[],"textArray":[]}