{"isSuccess":true,"url":"http://rosettacode.org//wiki/Factors_of_an_integer","codeArray":["function factors(num) {\n    var\n        n_factors = [],\n        i;\n    for (i = 1; i <= Math.floor(Math.sqrt(num)); i += 1)\n        if (num % i === 0) {\n            n_factors.push(i);\n            if (num / i !== i)\n                n_factors.push(num / i);\n        }\n    n_factors.sort(function(a, b) {\n        return a - b;\n    }); // numeric sort\n    return n_factors;\n}\nfactors(45); // [1,3,5,9,15,45] \nfactors(53); // [1,53] \nfactors(64); // [1,2,4,8,16,32,64]","// Monadic bind (chain) for lists\nfunction chain(xs, f) {\n    return [].concat.apply([], xs.map(f));\n}\n// [m..n]\nfunction range(m, n) {\n    return Array.apply(null, Array(n - m + 1)).map(function(x, i) {\n        return m + i;\n    });\n}\n\nfunction factors_naive(n) {\n    return chain(range(1, n), function(x) { // monadic chain/bind\n        return n % x ? [] : [x]; // monadic fail or inject/return\n    });\n}\nfactors_naive(6)","[1, 2, 3, 6]","console.log(\n    (function(lstTest) {\n        // INTEGER FACTORS\n        function integerFactors(n) {\n            var rRoot = Math.sqrt(n),\n                intRoot = Math.floor(rRoot),\n                lows = range(1, intRoot).filter(function(x) {\n                    return (n % x) === 0;\n                });\n            // for perfect squares, we can drop the head of the 'highs' list\n            return lows.concat(lows.map(function(x) {\n                return n / x;\n            }).reverse().slice((rRoot === intRoot) | 0));\n        }\n        // [m .. n]\n        function range(m, n) {\n            return Array.apply(null, Array(n - m + 1)).map(function(x, i) {\n                return m + i;\n            });\n        }\n        /*************************** TESTING *****************************/\n        // TABULATION OF RESULTS IN SPACED AND ALIGNED COLUMNS\n        function alignedTable(lstRows, lngPad, fnAligned) {\n            var lstColWidths = range(0, lstRows.reduce(function(a, x) {\n                return x.length > a ? x.length : a;\n            }, 0) - 1).map(function(iCol) {\n                return lstRows.reduce(function(a, lst) {\n                    var w = lst[iCol] ? lst[iCol].toString().length : 0;\n                    return (w > a) ? w : a;\n                }, 0);\n            });\n            return lstRows.map(function(lstRow) {\n                return lstRow.map(function(v, i) {\n                    return fnAligned(v, lstColWidths[i] + lngPad);\n                }).join('')\n            }).join('\\n');\n        }\n\n        function alignRight(n, lngWidth) {\n            var s = n.toString();\n            return Array(lngWidth - s.length + 1).join(' ') + s;\n        }\n        // TEST\n        return '\\nintegerFactors(n)\\n\\n' + alignedTable(\n            lstTest.map(integerFactors).map(function(x, i) {\n                return [lstTest[i], '-->'].concat(x);\n            }), 2, alignRight\n        ) + '\\n';\n    })([25, 45, 53, 64, 100, 102, 120, 12345, 32766, 32767])\n);","integerFactors(n)\n25-- > 1 5 25\n45-- > 1 3 5 9 15 45\n53-- > 1 53\n64-- > 1 2 4 8 16 32 64\n100-- > 1 2 4 5 10 20 25 50 100\n102-- > 1 2 3 6 17 34 51 102\n120-- > 1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120\n12345-- > 1 3 5 15 823 2469 4115 12345\n32766-- > 1 2 3 6 43 86 127 129 254 258 381 762 5461 10922 16383 32766\n32767-- > 1 7 31 151 217 1057 4681 32767"],"uncertainCodeArray":[],"textArray":[]}