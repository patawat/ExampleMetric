{"isSuccess":true,"url":"http://rosettacode.org//wiki/Parsing/RPN_to_infix_conversion","codeArray":["const Associativity = {\n    /** a / b / c = (a / b) / c */\n    left: 0,\n    /** a ^ b ^ c = a ^ (b ^ c) */\n    right: 1,\n    /** a + b + c = (a + b) + c = a + (b + c) */\n    both: 2,\n};\nconst operators = {\n    '+': {\n        precedence: 2,\n        associativity: Associativity.both\n    },\n    '-': {\n        precedence: 2,\n        associativity: Associativity.left\n    },\n    '*': {\n        precedence: 3,\n        associativity: Associativity.both\n    },\n    '/': {\n        precedence: 3,\n        associativity: Associativity.left\n    },\n    '^': {\n        precedence: 4,\n        associativity: Associativity.right\n    },\n};\nclass NumberNode {\n    constructor(text) {\n        this.text = text;\n    }\n    toString() {\n        return this.text;\n    }\n}\nclass InfixNode {\n    constructor(fnname, operands) {\n        this.fnname = fnname;\n        this.operands = operands;\n    }\n    toString(parentPrecedence = 0) {\n        const op = operators[this.fnname];\n        const leftAdd = op.associativity === Associativity.right ? 0.01 : 0;\n        const rightAdd = op.associativity === Associativity.left ? 0.01 : 0;\n        if (this.operands.length !== 2) throw Error(\"invalid operand count\");\n        const result = this.operands[0].toString(op.precedence + leftAdd) +\n            ` ${this.fnname} ${this.operands[1].toString(op.precedence + rightAdd)}`;\n        if (parentPrecedence > op.precedence) return `( ${result} )`;\n        else return result;\n    }\n}\n\nfunction rpnToTree(tokens) {\n    const stack = [];\n    console.log(`input = ${tokens}`);\n    for (const token of tokens.split(\" \")) {\n        if (token in operators) {\n            const op = operators[token],\n                arity = 2; // all of these operators take 2 arguments\n            if (stack.length < arity) throw Error(\"stack error\");\n            stack.push(new InfixNode(token, stack.splice(stack.length - arity)));\n        } else stack.push(new NumberNode(token));\n        console.log(`read ${token}, stack = [${stack.join(\", \")}]`);\n    }\n    if (stack.length !== 1) throw Error(\"stack error \" + stack);\n    return stack[0];\n}\nconst tests = [\n    [\"3 4 2 * 1 5 - 2 3 ^ ^ / +\", \"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\"],\n    [\"1 2 + 3 4 + ^ 5 6 + ^\", \"( ( 1 + 2 ) ^ ( 3 + 4 ) ) ^ ( 5 + 6 )\"],\n    [\"1 2 3 + +\", \"1 + 2 + 3\"] // test associativity (1+(2+3)) == (1+2+3)\n];\nfor (const [inp, oup] of tests) {\n    const realOup = rpnToTree(inp).toString();\n    console.log(realOup === oup ? \"Correct!\" : \"Incorrect!\");\n}"],"uncertainCodeArray":[],"textArray":[]}